/*
 * Generated by SAP SchemaToJava Generator NW05 on Wed Nov 10 18:12:45 EET 2004
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.mappings;

import javax.xml.namespace.QName;

/**
 * WSDL Parameter mapping.
 * Schema complexType Java representation.
 * Represents type {http://sapframework.sap.com}ParameterMapping
 */
public  class ParameterMapping extends com.sap.engine.services.webservices.espbase.mappings.MappingContext implements java.io.Serializable,java.lang.Cloneable {
  
  public static final String WSDL_PARAM_NAME = "WSDLParamName";
  public static final String JAVA_TYPE_NAME = "JavaTypeName";
  public static final String PARAMETER_TYPE = "ParameterType";
  public static final String HOLDER_NAME = "HolderName";
  public static final String FAULT_CONSTRUCTOR_PARAM_ORDER = "FaultConstructorParamOrder";
  public static final String FAULT_CONSTRUCTOR_PARAM_TYPES = "FaultConstructorParamTypes";
  public static final String DEFAULT_VALUE = "DefaultValue";
  public static final String IS_EXPOSED = "IsExposed";
  public static final String POSITION = "Position";
  public static final String IS_HEADER = "IsHeader";
  public static final String SCHEMA_QNAME = "SchemaQName";
  public static final String IS_SCHEMA_ELEMENT = "IsSchemaElement";
  public static final String IS_OPTIONAL = "IsOptional";
  public static final String NAMESPACE = "Namespace"; //used for Fault and Header parameters
  public static final String FAULT_ELEMENT_QNAME = "FaultElementName";
  public static final String IS_ATTACHMENT = "IsAttachment";
  public static final String ATTACHMENT_TRANSFER_ENCODING = "TransferEncoding";
  public static final String ATTACHMENT_CONTENT_TYPE = "ContentType";
  public static final String FAULT_ATTRIBUTE_COUNT = "FaultAttribCount";  
  public static final String FAULT_MESSAGE = "FaultMessage";
  public static final String JAVA_PARAM_NAME = "JavaParamName";
  public static final String JAVA_DOC = "JavaDoc";  
  public static final String IS_PARAMETER_SIMPLE_LIST = "ParameterSimpleList";
  public static final String VALUE_ADAPTER = "ValueAdapter";
  public static final String VALUE_TYPE_ANNOTATIONS = "ValueTypeAnnotations";  
  public static final String JAXB_BEAN_CLASS = "JaxbBeanClass";
  
  public static final int IN_TYPE = 1;
  public static final int OUT_TYPE = 2;
  public static final int FAULT_TYPE = 4;
  public static final int IN_OUT_TYPE = 8;
  public static final int RETURN_TYPE = 16;
  
  private Object typeRef;  
 
  
  /**
   * Constant used to express the array dimension of java class.
   * Examples:
   * array of int is described as 'int[]'.
   * Two dimensional array of float is described as 'float[][]'.
   */
  public static final String JAVA_ARRAY_DIMENSION  =  "[]";
  /**
   * For WSDL parameter sets mapped java type name.
   * @param javaType
   */
  public void setJavaType(String javaType) {
    super.setProperty(JAVA_TYPE_NAME,javaType);
  }
  
  /**
   * For WSDL parameter returns mapped java name.
   * @return
   */
  public String getJavaType() {
    return super.getProperty(JAVA_TYPE_NAME);
  }
  
  /**
   * Returns mapped java param name.
   * @return
   */
  public String getJavaParamName() {
    return (String) super.getProperty(JAVA_PARAM_NAME);
  }
  
  /**
   * Sets mapped java param name.
   * @param javaParamName
   */
  public void setJavaParamName(String javaParamName) {
    super.setProperty(JAVA_PARAM_NAME,javaParamName);
  }

  /**
   * Sets parameter type IN,OUT,IN_OUT,Fault
   * @param type
   */
  public void setParameterType(int type) {
    super.setProperty(PARAMETER_TYPE,Integer.toString(type));  
  }
  
  /**
   * Returns parameter type.
   * @param type
   * @return
   */
  public int getParameterType() {
    if (super.getProperty(PARAMETER_TYPE) == null) {
      return 0; // Unknown state
    }
    return Integer.parseInt(super.getProperty(PARAMETER_TYPE));
  }
  
  /**
   * Sets reference to WSDL Parameter.
   * @param qname
   */
  public void setWSDLParameterName(String name) {
    super.setProperty(WSDL_PARAM_NAME, name);
  }
  
  /**
   * Returns the reference to WSDL Parameter.
   * @return
   */
  public String getWSDLParameterName() {
    return (String) super.getProperty(WSDL_PARAM_NAME);
  }
  
  /**
   * Sets Holder class name for IN_OUT and multiple OUT parameters.
   * @param holderName
   */
  public void setHolderName(String holderName) {
    super.setProperty(HOLDER_NAME,holderName); 
  }
  
  /**
   * Returns holder name got IN_OUT and multiple OUT parameters.
   * @return
   */
  public String getHolderName() {
    return super.getProperty(HOLDER_NAME);
  }
  
  /**
   * Sets fault constructor parameter order. Relevant only for fault parameters.
   * @param order
   */
  public void setFaultConstructorParamOrder(String order) {
    super.setProperty(FAULT_CONSTRUCTOR_PARAM_ORDER,order);
  }
  
  /**
   * Returns fault constructor parameter order. Relevant only for fault parameters.
   * @param order
   * @return
   */
  public String getFaultConstructorParamOrder() {
    return super.getProperty(FAULT_CONSTRUCTOR_PARAM_ORDER);
  }
  
  /**
   * Sets parameter default value.
   * @param defaultValue
   */
  public void setDefaultValue(String defaultValue) {
    super.setProperty(DEFAULT_VALUE,defaultValue);
  }
  
  /**
   * Returns parameter default value.
   * @return
   */
  public String getDefaultValue() {
    return super.getProperty(DEFAULT_VALUE);
  }
  
  /**
   * Sets exposed flag on parameter.
   * @param exposed
   */
  public void setExposed(boolean exposed) {
    setProperty(IS_EXPOSED,String.valueOf(exposed));
  }
  
  /**
   * Returns exposed flag for the parameter.
   * @return
   */
  public boolean isExposed() {
    if (super.getProperty(IS_EXPOSED) == null) {
      return true;
    }
    return Boolean.valueOf(super.getProperty(IS_EXPOSED)).booleanValue();
  }
  
  /**
   * Sets parameter position in the mapped java method. It is relevant for in/in_out parameters only. 
   * @param position
   */
  public void setPosition(int position) {
		super.setProperty(POSITION, Integer.toString(position));
  }
  
  /**
   * Returns parameter position in the mapped java method.
   * @return
   */
  public int getPosition() {
    if (super.getProperty(POSITION)==null) {
      return -1;
    }
    return Integer.parseInt(super.getProperty(POSITION));
  }
  
  /**
   * Sets header flag on parameter.
   * @param isHeader
   */
  public void setHeader(boolean isHeader) {
    setProperty(IS_HEADER,String.valueOf(isHeader));
  }
  
  /**
   * Returns header flag for the parameter.
   * @return
   */
  public boolean isHeader() {
    if (super.getProperty(IS_HEADER) == null) {
      return false;
    }
    return Boolean.valueOf(super.getProperty(IS_HEADER)).booleanValue();
  }
  /**
   * @return IS_OPTIONAL flag value.
   */
  public boolean isOptional() {
    if (super.getProperty(IS_OPTIONAL) == null) {
      return false;
    }
    return Boolean.valueOf(super.getProperty(IS_OPTIONAL)).booleanValue();
  }
  
  /**
   * @return SCHEMA_QNAME flag value.
   */
  public void setSchemaQName(QName schemaType) {
    super.setProperty(SCHEMA_QNAME,schemaType.toString());        
  }  
  /**
   * @return SCHEMA_QNAME flag value.
   */
  public QName getSchemaQName() {
    return QName.valueOf(getProperty(SCHEMA_QNAME));
  }
  
  /**
   * @return Sets wrapper element QName.
   */
  public void setFaultElementQName(QName schemaType) {
    super.setProperty(FAULT_ELEMENT_QNAME,schemaType.toString());        
  }  
  /**
   * @return Returns Fault wrapper element QName.
   */
  public QName getFaultElementQName() {
    return QName.valueOf(getProperty(FAULT_ELEMENT_QNAME));
  }

  /**
   * @return HEADER_FAULT_NAMESPACE flag value.
   */  
  public void setNamespace(String namespace) {
    super.setProperty(NAMESPACE,namespace);
  }
  
  /**
   * @return HEADER_FAULT_NAMESPACE flag value.
   */  
  public String getNamespace() {
    return getProperty(NAMESPACE);
  }
  
  /**
   * Sets flag on parameter if it is Element.
   * @param exposed
   */
  public void setIsElement(boolean exposed) {
    setProperty(IS_SCHEMA_ELEMENT,String.valueOf(exposed));
  }
  
  /**
   * Returns Element flag for the parameter.
   * @return
   */
  public boolean isElement() {
    if (super.getProperty(IS_SCHEMA_ELEMENT) == null) {
      return false;
    }
    return Boolean.valueOf(super.getProperty(IS_SCHEMA_ELEMENT)).booleanValue();
  }
  /**
   * @return true if this parameter is attachment, false otherwise
   */
  public boolean isAttachment() {
    return Boolean.valueOf(getProperty(IS_ATTACHMENT)).booleanValue();  
  }
  /**
   * Sets this parameter as attachment.
   * 
   * @param contentType content-type of the attachment. Example 'text/plain', ...
   * @param transferEncoding content-transfer-encoding of the attachment. Example 'binary', '8bit',... 
   */
  public void markAsAttachment(String contentType, String transferEncoding) {
    setProperty(IS_ATTACHMENT, Boolean.TRUE.toString());  
    setProperty(ATTACHMENT_CONTENT_TYPE, contentType);  
    setProperty(ATTACHMENT_TRANSFER_ENCODING, transferEncoding);       
  }
  /**
   * Returns the value of ContentType property, or null if none is set. 
   */
  public String getAttachmentContentType() {
    return getProperty(ATTACHMENT_CONTENT_TYPE);
  }
  /**
   * Returns the value of TransferEncoding property, or null if none is set. 
   */
  public String getAttachmentTransferEncoding() {
    return getProperty(ATTACHMENT_TRANSFER_ENCODING);
  }
  
  /**
   * Returns javaDoc for the interface.
   * @return
   */
  public String getJavaDoc() {
    return super.getProperty(JAVA_DOC);
  }
  
  /**
   * Sets javaDoc for the interface.
   * @param javaDoc
   */
  public void setJavaDoc(String javaDoc) {
    super.setProperty(JAVA_DOC, javaDoc);
  }

  public Object getJaxbTypeRef() {
    return typeRef;
  }

  public void setJaxbTypeRef(Object typeRef) {
    this.typeRef = typeRef;
  }
  
  public Object clone() throws CloneNotSupportedException {
    ParameterMapping result = (ParameterMapping) super.clone();
    return result;
  }
}
