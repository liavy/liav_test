/*
 * Generated by SAP SchemaToJava Generator NW05 on Mon Oct 02 10:43:09 EEST 2006
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.client.wsa.generated.ns200508;

/**
 * Enumeration Java representation.
 * Represents type {http://www.w3.org/2005/08/addressing}FaultCodesType
 */
public class FaultCodesType implements java.io.Serializable {

  private static final long serialVersionUID = -6884501791912142504L;

  public static final javax.xml.namespace.QName _tnsInvalidAddressingHeader = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "InvalidAddressingHeader", "wsa");
  public static final javax.xml.namespace.QName _tnsInvalidAddress = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "InvalidAddress", "wsa");
  public static final javax.xml.namespace.QName _tnsInvalidEPR = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "InvalidEPR", "wsa");
  public static final javax.xml.namespace.QName _tnsInvalidCardinality = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "InvalidCardinality", "wsa");
  public static final javax.xml.namespace.QName _tnsMissingAddressInEPR = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "MissingAddressInEPR", "wsa");
  public static final javax.xml.namespace.QName _tnsDuplicateMessageID = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "DuplicateMessageID", "wsa");
  public static final javax.xml.namespace.QName _tnsActionMismatch = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "ActionMismatch", "wsa");
  public static final javax.xml.namespace.QName _tnsMessageAddressingHeaderRequired = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "MessageAddressingHeaderRequired", "wsa");
  public static final javax.xml.namespace.QName _tnsDestinationUnreachable = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "DestinationUnreachable", "wsa");
  public static final javax.xml.namespace.QName _tnsActionNotSupported = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "ActionNotSupported", "wsa");
  public static final javax.xml.namespace.QName _tnsEndpointUnavailable = new javax.xml.namespace.QName("http://schemas.xmlsoap.org/ws/2004/08/addressing", "EndpointUnavailable", "wsa");

  public static final FaultCodesType tnsInvalidAddressingHeader = new FaultCodesType(_tnsInvalidAddressingHeader);
  public static final FaultCodesType tnsInvalidAddress = new FaultCodesType(_tnsInvalidAddress);
  public static final FaultCodesType tnsInvalidEPR = new FaultCodesType(_tnsInvalidEPR);
  public static final FaultCodesType tnsInvalidCardinality = new FaultCodesType(_tnsInvalidCardinality);
  public static final FaultCodesType tnsMissingAddressInEPR = new FaultCodesType(_tnsMissingAddressInEPR);
  public static final FaultCodesType tnsDuplicateMessageID = new FaultCodesType(_tnsDuplicateMessageID);
  public static final FaultCodesType tnsActionMismatch = new FaultCodesType(_tnsActionMismatch);
  public static final FaultCodesType tnsMessageAddressingHeaderRequired = new FaultCodesType(_tnsMessageAddressingHeaderRequired);
  public static final FaultCodesType tnsDestinationUnreachable = new FaultCodesType(_tnsDestinationUnreachable);
  public static final FaultCodesType tnsActionNotSupported = new FaultCodesType(_tnsActionNotSupported);
  public static final FaultCodesType tnsEndpointUnavailable = new FaultCodesType(_tnsEndpointUnavailable);

  //  Enumeration Content
  protected javax.xml.namespace.QName _value;

  public FaultCodesType(javax.xml.namespace.QName _value) {
    if (_tnsInvalidAddressingHeader.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsInvalidAddress.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsInvalidEPR.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsInvalidCardinality.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsMissingAddressInEPR.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsDuplicateMessageID.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsActionMismatch.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsMessageAddressingHeaderRequired.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsDestinationUnreachable.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsActionNotSupported.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_tnsEndpointUnavailable.equals(_value)) {
      this._value = _value;
      return;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+_value+"] passed.");
  }

  public javax.xml.namespace.QName getValue() {
    return _value;
  }

  public static FaultCodesType fromValue(javax.xml.namespace.QName value) {
    if (_tnsInvalidAddressingHeader.equals(value)) {
      return tnsInvalidAddressingHeader;
    }
    if (_tnsInvalidAddress.equals(value)) {
      return tnsInvalidAddress;
    }
    if (_tnsInvalidEPR.equals(value)) {
      return tnsInvalidEPR;
    }
    if (_tnsInvalidCardinality.equals(value)) {
      return tnsInvalidCardinality;
    }
    if (_tnsMissingAddressInEPR.equals(value)) {
      return tnsMissingAddressInEPR;
    }
    if (_tnsDuplicateMessageID.equals(value)) {
      return tnsDuplicateMessageID;
    }
    if (_tnsActionMismatch.equals(value)) {
      return tnsActionMismatch;
    }
    if (_tnsMessageAddressingHeaderRequired.equals(value)) {
      return tnsMessageAddressingHeaderRequired;
    }
    if (_tnsDestinationUnreachable.equals(value)) {
      return tnsDestinationUnreachable;
    }
    if (_tnsActionNotSupported.equals(value)) {
      return tnsActionNotSupported;
    }
    if (_tnsEndpointUnavailable.equals(value)) {
      return tnsEndpointUnavailable;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public static FaultCodesType fromString(String value) {
    if ("wsa:InvalidAddressingHeader".equals(value)) {
      return tnsInvalidAddressingHeader;
    }
    if ("wsa:InvalidAddress".equals(value)) {
      return tnsInvalidAddress;
    }
    if ("wsa:InvalidEPR".equals(value)) {
      return tnsInvalidEPR;
    }
    if ("wsa:InvalidCardinality".equals(value)) {
      return tnsInvalidCardinality;
    }
    if ("wsa:MissingAddressInEPR".equals(value)) {
      return tnsMissingAddressInEPR;
    }
    if ("wsa:DuplicateMessageID".equals(value)) {
      return tnsDuplicateMessageID;
    }
    if ("wsa:ActionMismatch".equals(value)) {
      return tnsActionMismatch;
    }
    if ("wsa:MessageAddressingHeaderRequired".equals(value)) {
      return tnsMessageAddressingHeaderRequired;
    }
    if ("wsa:DestinationUnreachable".equals(value)) {
      return tnsDestinationUnreachable;
    }
    if ("wsa:ActionNotSupported".equals(value)) {
      return tnsActionNotSupported;
    }
    if ("wsa:EndpointUnavailable".equals(value)) {
      return tnsEndpointUnavailable;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public java.lang.String toString() {
    if (_tnsInvalidAddressingHeader.equals(_value)) {
      return "wsa:InvalidAddressingHeader";
    }
    if (_tnsInvalidAddress.equals(_value)) {
      return "wsa:InvalidAddress";
    }
    if (_tnsInvalidEPR.equals(_value)) {
      return "wsa:InvalidEPR";
    }
    if (_tnsInvalidCardinality.equals(_value)) {
      return "wsa:InvalidCardinality";
    }
    if (_tnsMissingAddressInEPR.equals(_value)) {
      return "wsa:MissingAddressInEPR";
    }
    if (_tnsDuplicateMessageID.equals(_value)) {
      return "wsa:DuplicateMessageID";
    }
    if (_tnsActionMismatch.equals(_value)) {
      return "wsa:ActionMismatch";
    }
    if (_tnsMessageAddressingHeaderRequired.equals(_value)) {
      return "wsa:MessageAddressingHeaderRequired";
    }
    if (_tnsDestinationUnreachable.equals(_value)) {
      return "wsa:DestinationUnreachable";
    }
    if (_tnsActionNotSupported.equals(_value)) {
      return "wsa:ActionNotSupported";
    }
    if (_tnsEndpointUnavailable.equals(_value)) {
      return "wsa:EndpointUnavailable";
    }
    return java.lang.String.valueOf(_value);
  }

  public boolean equals(java.lang.Object obj) {
    if (obj != null) {
      if (obj instanceof FaultCodesType) {
        if (_value.equals(((FaultCodesType)obj)._value)) {
          return true;
        }
      }
    }
    return false;
  }

  public int hashCode() {
    return this._value.hashCode();
  }

}
