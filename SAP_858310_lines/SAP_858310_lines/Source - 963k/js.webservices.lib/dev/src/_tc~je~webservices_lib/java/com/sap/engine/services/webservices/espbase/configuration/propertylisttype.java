/*
 * Generated by SAP SchemaToJava Generator NW05 on Tue Feb 22 14:02:04 EET 2005
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.configuration;

import java.util.List;

import javax.xml.namespace.QName;

/**
 * Schema complexType Java representation.
 * Represents type {http://www.sap.com/webas/710/ws/configuration-descriptor}PropertyListType
 */
public  class PropertyListType implements java.io.Serializable,java.lang.Cloneable {

  // Attribute field for attribute {}selected
  private java.lang.Boolean _a_Selected;
  /**
   * Set method for attribute {}selected
   */
  public void setSelected(java.lang.Boolean _Selected) {
    this._a_Selected = _Selected;
  }
  /**
   * Get method for attribute {}selected
   */
  public java.lang.Boolean getSelected() {
    return _a_Selected;
  }

  // Element field for element {}Property
  private java.util.ArrayList _f_Property = new java.util.ArrayList();
  /**
   * Set method for element {}Property
   */
  public void setProperty(com.sap.engine.services.webservices.espbase.configuration.PropertyType[] _Property) {
    this._f_Property.clear();
    if (_Property != null) {
      for (int i=0; i<_Property.length; i++) {
        if (_Property[i] != null)
          this._f_Property.add(_Property[i]);
      }
    }
  }
  
  public void addProperty(com.sap.engine.services.webservices.espbase.configuration.PropertyType _Property) {
    if (_Property == null) return;
    this._f_Property.add(_Property);
  }
  
  public void addProperty(String ns, String name, String value) {
    PropertyType pType = new PropertyType();
    pType.setNamespace(ns);
    pType.setName(name);
    pType.set_value(value);
    this.addProperty(pType);
  }
  /**
   * Get method for element {}Property
   */
  public com.sap.engine.services.webservices.espbase.configuration.PropertyType[] getProperty() {
    com.sap.engine.services.webservices.espbase.configuration.PropertyType[] result = new com.sap.engine.services.webservices.espbase.configuration.PropertyType[_f_Property.size()];
    _f_Property.toArray(result);
    return result;
  }

  /**
   * Equals method implementation.
   */
  public boolean equals(Object object) {
    if (object == null) return false;
    if (!(object instanceof PropertyListType)) return false;
    PropertyListType typed = (PropertyListType) object;
    if (this._a_Selected != null) {
      if (typed._a_Selected == null) return false;
      if (!this._a_Selected.equals(typed._a_Selected)) return false;
    } else {
      if (typed._a_Selected != null) return false;
    }
    com.sap.engine.services.webservices.espbase.configuration.PropertyType[] _f_Property1 = this.getProperty();
    com.sap.engine.services.webservices.espbase.configuration.PropertyType[] _f_Property2 = typed.getProperty();
    if (_f_Property1 != null) {
      if (_f_Property2 == null) return false;
      if (_f_Property1.length != _f_Property2.length) return false;
      for (int i1 = 0; i1 < _f_Property1.length ; i1++) {
        if (_f_Property1[i1] != null) {
          if (_f_Property2[i1] == null) return false;
          if (!_f_Property1[i1].equals(_f_Property2[i1])) return false;
        } else {
          if (_f_Property2[i1] != null) return false;
        }
      }
    } else {
      if (_f_Property2 != null) return false;
    }
    return true;
  }
  
  /**
   * Returns the Property type with <code>qname</code>.
   * @param qname
   * @return
   */
  public PropertyType getProperty(QName qname) {
    if (qname != null) {
      return getProperty(qname.getNamespaceURI(), qname.getLocalPart());      
    } else {
      return null;
    }
  }
  
  /**
   * Returns the PropertyType object with namespace <code>ns</code>
   * and local name <code>name</code> which is first met, in traversing 
   * the properties array starting from index 0.
   * If no property with such name is met, null is returned.
   */
  public PropertyType getProperty(String ns, String name) {
    PropertyType pType;
    for (int i = 0; i < _f_Property.size(); i++) {
      pType = (PropertyType) _f_Property.get(i);
      if (pType.getNamespace().equals(ns) && pType.getName().equals(name)) {
        return pType;         
      }
    }
    return null;
  }
  /**
   * Returns property value as string or null if the property was not found, 
   * or the property value is null.
   * @param ns
   * @param name
   * @return
   */
  public String getPropertyValue(String ns, String name) {
    PropertyType pType = getProperty(ns, name);
    if (pType != null) {
      return pType.get_value();
    }
    return null;
  }
  /**
   * If property with namespace <code>pNS</code> and name <code>pName</code>
   * is present its value is set to <code>pValue</code>. It such property is not
   * present - it is added.
   * @param pNs 
   * @param pName
   * @param pValue
   * @return true if the property is present and its value preset, false otherwise
   */
  public boolean overwritePropertyValue(String pNS, String pName, String pValue) {
    PropertyType pType;
    for (int i = 0; i < _f_Property.size(); i++) {
      pType = (PropertyType) _f_Property.get(i);
      if (pType.getNamespace().equals(pNS) && pType.getName().equals(pName)) {
        pType.set_value(pValue);
        return true;         
      }
    }
    //property is missing, create it
    pType = new PropertyType();
    pType.setName(pName);
    pType.setNamespace(pNS);
    pType.set_value(pValue);
    addProperty(pType);
    return false;
  }
  /**
   * For each property inside <code>props</code> if such property already exists in the 
   * list its value is updated, otherwise a new property is added.  
   * 
   * @param props
   */
  public void overwriteProperties(List<PropertyType> props) {
    for (PropertyType type : props) {
      overwritePropertyValue(type.getNamespace(), type.getName(), type.get_value());
    }
  }
  /**
   * Returns an array of PropertyType objects, which
   * namespace values equal to <code>ns</code>.
   * The order of properties is preserved - that is if P1 is before P2 in
   * property list, it will be also true for the array returned by this mehtod.
   */
  public PropertyType[] getPropertiesByNS(String ns) {
    java.util.ArrayList list = new java.util.ArrayList();
    PropertyType pType;
    for (int i = 0; i < _f_Property.size(); i++) {
      pType = (PropertyType) _f_Property.get(i);
      if (pType.getNamespace().equals(ns)) {
        list.add(pType);         
      }
    }
    return (PropertyType[]) list.toArray(new PropertyType[list.size()]);
  }  

  /**
   * Hashcode method implementation.
   */
  public int hashCode() {
    int result = 0;
    if (this._a_Selected != null) {
      result+= this._a_Selected.hashCode();
    }
    com.sap.engine.services.webservices.espbase.configuration.PropertyType[] _f_Property1 = this.getProperty();
    if (_f_Property1 != null) {
      for (int i1 = 0; i1 < _f_Property1.length ; i1++) {
        if (_f_Property1[i1] != null) {
          result+= _f_Property1[i1].hashCode();
        }
      }
    }
    return result;
  }
}
