package com.sap.engine.services.webservices.wsdl;

import com.sap.engine.lib.xml.util.NS;
import com.sap.engine.lib.xml.util.QName;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;


public class WSDLDefinitionsParser extends AbstractWSDLDefinitionsParser {

  public WSDLDefinitionsParser() {
    init();
  }

  public void init() {
    try {
      doc = factory.newDocumentBuilder().newDocument();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public Document parse(WSDLDefinitions def) throws WSDLException {
    this.def = def;
    root = doc.createElementNS(NS.WSDL, "wsdl:definitions");

    this.parseDocumentation(root, def);

    if (def.getName() != null) {
      root.setAttribute("name", def.getName());
    }

    if (def.targetNamespace != null) {
      root.setAttribute("targetNamespace", def.targetNamespace);
    }

    if (def.xsdNamespace != null) {
      root.setAttribute("xmlns:xs", def.xsdNamespace);
    }
    Hashtable attributes = def.getAdditionalAttributes();
    Enumeration en = attributes.keys();

    while (en.hasMoreElements()) {
      String key = (String) en.nextElement();
      root.setAttribute(key, (String) attributes.get(key));
    }
    parseDefinitions();
    doc.appendChild(root);
    return doc;
  }

  public void parseDefinitionsToFile(WSDLDefinitions def, File outputFile) throws IOException, WSDLException {
    FileOutputStream out = new FileOutputStream(outputFile);
    try {
      this.writeDefintionsToStream(def, out);
    } finally {
      out.close();
    }
  }

  public void writeDefintionsToStream(WSDLDefinitions def, OutputStream stream) throws IOException, WSDLException {
    Document doc = this.parse(def);
    try {
      Transformer transformer = transformerFactory.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT, "yes");
      transformer.transform(new DOMSource(doc), new StreamResult(stream));
      stream.flush();
    } catch (TransformerConfigurationException e) {
      throw new WSDLException("Invalid transformer configuration", e);
    } catch (TransformerException e) {
      throw new WSDLException("Error in transforming", e);
    }
  }

  private void parseDefinitions() throws WSDLException {
    int i;
    ArrayList usedForAll;

    doc.appendChild(doc.createComment("            Generated by WSDLDefinitionsParser    "));

    usedForAll = def.getImportDeclaratuions();

    for (i = 0; i < usedForAll.size(); i++) {
      parseImport((WSDLImport) usedForAll.get(i));
    }

    parseSchema(def.getSchemaDefinitions());

    usedForAll = def.getMessages();
    for (i = 0; i < usedForAll.size(); i++) {
      parseMessage((WSDLMessage) usedForAll.get(i));
    }

    usedForAll = def.getFeatures();
    for (i = 0; i < usedForAll.size(); i++) {
      parseFeature((SAPFeature) usedForAll.get(i));
    }

    usedForAll = def.portTypes;
    for (i = 0; i < usedForAll.size(); i++) {
      parsePortType((WSDLPortType) usedForAll.get(i));
    }

    usedForAll = def.getBindings();
    for (i = 0; i < usedForAll.size(); i++) {
      parseBinding((WSDLBinding) usedForAll.get(i));
    }

    usedForAll = def.getServices();
    for (i = 0; i < usedForAll.size(); i++) {
      parseServices((WSDLService) usedForAll.get(i));
    }
  }

  private void parseFeature(SAPFeature feature) {
    Element feElement = doc.createElementNS(SAPFEATURE_NS, "sap:Feature");

    String name = feature.getName();
    String uri = feature.getUri();

    feElement.setAttribute("name", name);
    feElement.setAttribute("uri", uri);

    ArrayList propList = feature.getProperties();
    ArrayList optionList;
    SAPProperty tmpProperty;
    SAPOption tmpOption;
    Element propElement;
    Element optionElement;

    for (int i = 0; i < propList.size(); i++) {
      tmpProperty = (SAPProperty) propList.get(i);
      propElement = doc.createElementNS(SAPFEATURE_NS, "sap:Property");
      propElement.setAttribute("qname", tmpProperty.getQname().getQName());

      optionList = tmpProperty.getOptions();
      for (int j = 0; j < optionList.size(); j++) {
        optionElement = doc.createElementNS(SAPFEATURE_NS, "sap:Option");
        tmpOption = (SAPOption) optionList.get(j);
        optionElement.setAttribute("value", tmpOption.getValue());
        propElement.appendChild(optionElement);
      }

      feElement.appendChild(propElement);
    }

    root.appendChild(feElement);
  }

  private void parseImport(WSDLImport iMport) {
    Element importElement = doc.createElementNS(NS.WSDL, "wsdl:import");
    importElement.setAttribute("location", iMport.getLocation());
    importElement.setAttribute("namespace", iMport.getNamespace());

    root.appendChild(importElement);
  }

  private void parseSchema(ArrayList list) {
    if ((list != null) && (list.size() > 0)) {
      Element typesElement = doc.createElementNS(NS.WSDL, "wsdl:types");
      for (int i = 0; i < list.size(); i++) {
        root.appendChild(typesElement);
        Node el = ((DOMSource) list.get(i)).getNode();
        Node el2 = root.getOwnerDocument().importNode(el, true);
        typesElement.appendChild(el2);
      }
    }
  }

  private void parseMessage(WSDLMessage mes) throws WSDLException {
    Element elMess = doc.createElementNS(NS.WSDL, "wsdl:message");
    elMess.setAttribute("name", mes.getName());

    this.parseDocumentation(elMess, mes);

    ArrayList parts = mes.getParts();

    for (int i = 0; i < parts.size(); i++) {
      parsePart((WSDLPart) parts.get(i), elMess);
    }
    root.appendChild(elMess);
  }

  private void parsePart(WSDLPart part, Element parent) throws WSDLException {
    QName qName = part.getType();
    int style = part.getStyle();
    String typeEl;

    if (style == WSDLPart.SIMPLE_TYPE) {
      typeEl = "type";
    } else if (style == WSDLPart.STRUCTURED_TYPE) {
      typeEl = "element";
    } else {
      throw new WSDLException("This is not a valid attribute for a part element");
    }
    Element elPart = doc.createElementNS(NS.WSDL, "wsdl:part");
    elPart.setAttribute("name", part.getName());
    elPart.setAttribute(typeEl, qName.getQName());

    parent.appendChild(elPart);
  }

  private void parsePortType(WSDLPortType pType) {
    ArrayList operations = pType.getOperations();
    Element elPortType = doc.createElementNS(NS.WSDL, "wsdl:portType");
    elPortType.setAttribute("name", pType.getName());

    this.parseDocumentation(elPortType, pType);

    parseUseFeatures(elPortType, pType.getUseFeatures());

    for (int i = 0; i < operations.size(); i++) {
      parseOperation((WSDLOperation) operations.get(i), elPortType);
    }
    root.appendChild(elPortType);
  }

  private void parseOperation(WSDLOperation operation, Element parent) {
    WSDLChannel inoutChannel = operation.getInput();
    Element operationEl = doc.createElementNS(NS.WSDL, "wsdl:operation");
    operationEl.setAttribute("name", operation.getName());

    parseDocumentation(operationEl, operation);

    parseUseFeatures(operationEl, operation.getUseFeatures());

    if ((operation.getParameterOrder() != null) && (!operation.getParameterOrder().equals(""))) {
      operationEl.setAttribute("parameterOrder", operation.getParameterOrder());
    }
    Element inoutEl;

    if (inoutChannel != null) {
      inoutEl = doc.createElementNS(NS.WSDL, "wsdl:input");
      if (inoutChannel.getName() != null) {
        inoutEl.setAttribute("name", inoutChannel.getName());
      }
      parseDocumentation(inoutEl, inoutChannel);

      inoutEl.setAttribute("message", inoutChannel.getMessage().getQName());
      operationEl.appendChild(inoutEl);
    }

    inoutChannel = operation.getOutput();
    if (inoutChannel != null) {
      inoutEl = doc.createElementNS(NS.WSDL, "wsdl:output");
      if (inoutChannel.getName() != null) {
        inoutEl.setAttribute("name", inoutChannel.getName());
      }
      parseDocumentation(inoutEl, inoutChannel);

      inoutEl.setAttribute("message", inoutChannel.getMessage().getQName());
      operationEl.appendChild(inoutEl);
    }

    ArrayList faults = operation.getFaultList();
    WSDLFault fault;
    Element faultEl;
    for (int i = 0; i < faults.size(); i++) {
      fault = (WSDLFault) faults.get(i);
      faultEl = doc.createElementNS(NS.WSDL, "wsdl:fault");
      if (fault.getName() != null) {
        faultEl.setAttribute("name", fault.getName());
      }
      parseDocumentation(faultEl, fault);

      faultEl.setAttribute("message", fault.getMessage().getQName());
      operationEl.appendChild(faultEl);
    }

    parent.appendChild(operationEl);
  }

  private void parseServices(WSDLService service) throws WSDLException {
    Element serviceEl = doc.createElementNS(NS.WSDL, "wsdl:service");
    serviceEl.setAttribute("name", service.getName());

    parseDocumentation(serviceEl, service);

    ArrayList ports = service.getPorts();
    for (int i = 0; i < ports.size(); i++) {
      parsePort((WSDLPort) ports.get(i), serviceEl);
    }

    root.appendChild(serviceEl);
  }

  private void parsePort(WSDLPort port, Element parent) throws WSDLException {
    Element portEl = doc.createElementNS(NS.WSDL, "wsdl:port");
    portEl.setAttribute("name", port.getName());
    portEl.setAttribute("binding", port.getBinding().getQName());

    parseDocumentation(portEl, port);

    WSDLExtension extension = port.getExtension();
    parseExtensionElement(extension, portEl);

    parent.appendChild(portEl);
  }
}