/*
 * Generated by SAP SchemaToJava Generator NW05 on Wed Nov 10 18:12:45 EET 2004
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.mappings;

import java.util.ArrayList;

import javax.xml.namespace.QName;

/**
 * Schema complexType Java representation.
 * Represents type {http://sapframework.sap.com}MappingRules
 */
public  class MappingRules extends java.lang.Object implements java.io.Serializable,java.lang.Cloneable {

  // Element field for element {}interface
  private java.util.ArrayList _f_Interface = new java.util.ArrayList();  
  /**
   * Set method for element {}interface
   */
  public void setInterface(com.sap.engine.services.webservices.espbase.mappings.InterfaceMapping[] _Interface) {
    _f_Interface.clear();
    if (_Interface != null) {
      for (int i=0; i<_Interface.length; i++) {
        if (_Interface[i] != null) {
          _f_Interface.add(_Interface[i]);    
        }
      }
    }
  }
  /**
   * Get method for element {}interface
   */
  public com.sap.engine.services.webservices.espbase.mappings.InterfaceMapping[] getInterface() {
    InterfaceMapping[] result = new InterfaceMapping[_f_Interface.size()];
    _f_Interface.toArray(result);
    return result;
  }
  
  /*
   * Returns interface mapping by interface mapping id
   */
  public InterfaceMapping getInterface(String interfaceMappingId) {
    for (int i=0; i<_f_Interface.size(); i++) {
      InterfaceMapping interfaceMapping = (InterfaceMapping) _f_Interface.get(i);
      if (interfaceMappingId.equals(interfaceMapping.getInterfaceMappingID())) {
        return interfaceMapping;
      }
    }
    return null;
  }
  
  public InterfaceMapping removeInterface(String interfaceMappingId) {
    for (int i=0; i<_f_Interface.size(); i++) {
      InterfaceMapping interfaceMapping = (InterfaceMapping) _f_Interface.get(i);
      if (interfaceMappingId.equals(interfaceMapping.getInterfaceMappingID())) {
        _f_Interface.remove(i);
        return interfaceMapping;
      }
    }    
    return null;
  }
  
  /**
   * Add method for element {}interface
   * @param _Interface
   */
  public void addInterface(InterfaceMapping _Interface) {
    _f_Interface.add(_Interface);
  }
  
  /**
   * Returns inteface which is derived from the passed binding and portType.
   * @param pTypeName
   * @param bindingName
   */
  public InterfaceMapping getInterface(QName pTypeName, QName bindingName) {
    if (pTypeName == null || bindingName == null) {
      return null;
    }
    for (int i=0; i<_f_Interface.size(); i++) {
      InterfaceMapping iMapping = (InterfaceMapping) _f_Interface.get(i);
      if (pTypeName.equals(iMapping.getPortType()) && bindingName.equals(iMapping.getBindingQName())) {
        return iMapping;
      }
    }
    return null;
  }

  // Element field for element {}service
  private ArrayList _f_Service = new ArrayList();
  /**
   * Set method for element {}service
   */
  public void setService(com.sap.engine.services.webservices.espbase.mappings.ServiceMapping[] _Service) {
    _f_Service.clear();
    if (_Service != null) {
      for (int i=0; i<_Service.length; i++) {
        if (_Service[i] != null) {
          _f_Service.add(_Service[i]);    
        }
      }
    }
  }
  /**
   * Get method for element {}service
   */
  public com.sap.engine.services.webservices.espbase.mappings.ServiceMapping[] getService() {
    ServiceMapping[] result = new ServiceMapping[_f_Service.size()];
    _f_Service.toArray(result);
    return result;
  }
  
  public com.sap.engine.services.webservices.espbase.mappings.ServiceMapping getService(String serviceMappingId) {
    for (int i=0; i<_f_Service.size(); i++) {
      ServiceMapping smap = (ServiceMapping) _f_Service.get(i);
      if (smap.getServiceMappingId().equals(serviceMappingId)) {
        return smap; 
      }
    }
    return null;    
  }
  
  /**
   * Return service mapping for specific service.
   * @param serviceName
   * @return
   */
  public com.sap.engine.services.webservices.espbase.mappings.ServiceMapping getService(QName serviceName) {
    for (int i=0; i<_f_Service.size(); i++) {
      ServiceMapping smap = (ServiceMapping) _f_Service.get(i);
      if (smap.getServiceName().equals(serviceName)) {
        return smap; 
      }
    }
    return null;
  } 
  
  /**
   * Add method for element {}interface
   * @param _Interface
   */
  public void addService(ServiceMapping _Service) {
    _f_Service.add(_Service);
  }  
  
}
