/*
 * Generated by SAP SchemaToJava Generator NW05 on Wed May 31 10:38:16 EEST 2006
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.configuration.domain;

/**
 * Schema complexType Java representation.
 * Represents type {http://www.sap.com/webas/710/ws/configuration-domain}DomainPropertyListType
 */
public  class DomainPropertyListType implements java.io.Serializable {

  // Element field for element {}property
  private java.util.ArrayList _f_Property = new java.util.ArrayList();
  /**
   * Set method for element {}property
   */
  public void setProperty(com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] _Property) {
    this._f_Property.clear();
    if (_Property != null) {
      for (int i=0; i<_Property.length; i++) {
        if (_Property[i] != null)
          this._f_Property.add(_Property[i]);
      }
    }
  }
  /**
   * Returns property with name and namespace equal to <code>ns</code> and <code>name</code> correspondingly. If not
   * found <code>null</code> is returned.
   * @param ns
   * @param name
   * @return
   */
  public DomainPropertyType getProperty(String ns, String name) {
    DomainPropertyType dProp;
    for (int i = 0; i < _f_Property.size(); i++) {
      dProp = (DomainPropertyType) _f_Property.get(i);
      if (dProp.getName().equals(name) && dProp.getNamespace().equals(ns)) {
        return dProp;
      }
    }
    return null;
  }
  /**
   * Get method for element {}property
   */
  public com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] getProperty() {
    com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] result = new com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[_f_Property.size()];
    _f_Property.toArray(result);
    return result;
  }

  /**
   * Equals method implementation.
   */
  public boolean equals(Object object) {
    if (object == null) return false;
    if (!(object instanceof DomainPropertyListType)) return false;
    DomainPropertyListType typed = (DomainPropertyListType) object;
    com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] _f_Property1 = this.getProperty();
    com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] _f_Property2 = typed.getProperty();
    if (_f_Property1 != null) {
      if (_f_Property2 == null) return false;
      if (_f_Property1.length != _f_Property2.length) return false;
      for (int i1 = 0; i1 < _f_Property1.length ; i1++) {
        if (_f_Property1[i1] != null) {
          if (_f_Property2[i1] == null) return false;
          if (!_f_Property1[i1].equals(_f_Property2[i1])) return false;
        } else {
          if (_f_Property2[i1] != null) return false;
        }
      }
    } else {
      if (_f_Property2 != null) return false;
    }
    return true;
  }

  /**
   * Hashcode method implementation.
   */
  public int hashCode() {
    int result = 0;
    com.sap.engine.services.webservices.espbase.configuration.domain.DomainPropertyType[] _f_Property1 = this.getProperty();
    if (_f_Property1 != null) {
      for (int i1 = 0; i1 < _f_Property1.length ; i1++) {
        if (_f_Property1[i1] != null) {
          result+= _f_Property1[i1].hashCode();
        }
      }
    }
    return result;
  }
}
