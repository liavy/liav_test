/*
 * Generated by SAP SchemaToJava Generator NW05 on Wed Nov 10 18:12:45 EET 2004
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.services.webservices.espbase.mappings;

import javax.xml.namespace.QName;

/**
 * WSDL to Java interface mapping class.
 * Schema complexType Java representation.
 * Represents type {http://sapframework.sap.com}InterfaceMapping
 */
public  class InterfaceMapping extends com.sap.engine.services.webservices.espbase.mappings.MappingContext implements java.io.Serializable,java.lang.Cloneable {
  
  public static final String PORT_TYPE_NAME = "PortTypeQName";
  public static final String BINDING_NAME = "BindingQName";
  public static final String SEI_NAME = "SEIName";  
  public static final String BINDING_ID = "BindingID";
  public static final String INTERFACE_MAPPING_ID = "InterfaceMappingID";
  public static final String OUTSIDE_IN_INTERFACE = "OutsideInInterface";
  public static final String JAXWS_INTERFACE = "JAXWSInterface";
  public static final String JAXWS_PROVIDER_INTERFACE = "JAXWSProviderInterface";
  public static final String JAVA_DOC = "JavaDoc";
  //i044259
  public static final String SERVICE_NAME = "ServiceQName";
  public static final String PORT_NAME = "PortQName";
  public static final String GALAXY_INTERFACE = "Galaxy_SDO";
  public static final String SDO_INTERFACE = "Interface_SDO"; //this property has the same meaning as GALAXY_SDO
  
  
  /**
   * Under this constant value, binding type property is mapped.
   */
  public static final String BINDING_TYPE  =  "BindingType";
  /**
   * Constant prepresenting soap binding type.
   */ 
  public static final String SOAPBINDING  =  "Soap";
  /**
   * Constant prepresenting mime binding type.
   */ 
  public static final String MIMEBINDING  =  "Mime";
  /**
   * Constant prepresenting http GET binding type.
   */ 
  public static final String HTTPGETBINDING  =  "HttpGet";
  /**
   * Constant prepresenting http POST binding type.
   */ 
  public static final String HTTPPOSTBINDING  =  "HttpPost";
  /**
   * Constant prepresenting http binding type.
   */ 
  public static final String HTTPBINDING  =  "Http";
  /**
   * Under this constant value the soap version is bound
   */
  public static final String SOAP_VERSION  = "SoapVersion";
  /**
   * Constant representing SOAP1.1 version
   * @see InterfaceMapping#SOAP_VERSION
   */
  public static final String SOAP_VERSION_11  = "SOAP11";
  /**
   * Constant representing SOAP1.2 version
   * @see InterfaceMapping#SOAP_VERSION
   */
  public static final String SOAP_VERSION_12  = "SOAP12";
  /**
   * Constant representing SOAP1.1 with MTOM version
   * @see InterfaceMapping#SOAP_VERSION
   */
  public static final String SOAP_VERSION_11_MTOM  = "SOAP11MTOM";
  /**
   * Constant representing SOAP1.2 with MTOM version
   * @see InterfaceMapping#SOAP_VERSION
   */
  public static final String SOAP_VERSION_12_MTOM  = "SOAP12MTOM";
  /**
   * Constant representing HTTP binding request method
   * @see InterfaceMapping#HTTP_REQUEST_METHOD
   */
  public static final String HTTP_REQUEST_METHOD  = "HTTPRequestMethod";
  
  /**
   * Returns interface ID for this interface mapping.
   * @return
   */
  public String getInterfaceMappingID() {
    return super.getProperty(INTERFACE_MAPPING_ID);
  }
  
  /**
   * Sets interface ID for this interface mapping.
   * @param interfaceId
   */
  public void setInterfaceMappingID(String interfaceId) {
    super.setProperty(INTERFACE_MAPPING_ID, interfaceId);
  }
  
  /**
   * Returns javaDoc for the interface.
   * @return
   */
  public String getJavaDoc() {
    return super.getProperty(JAVA_DOC);
  }
  
  /**
   * Sets javaDoc for the interface.
   * @param javaDoc
   */
  public void setJavaDoc(String javaDoc) {
    super.setProperty(JAVA_DOC, javaDoc);
  }
  
  
  // Element field for element {}operation
  private java.util.ArrayList _f_Operation = new java.util.ArrayList();
  /**
   * Set method for element {}operation
   */
  public void setOperation(com.sap.engine.services.webservices.espbase.mappings.OperationMapping[] _Operation) {
    _f_Operation.clear();
    if (_Operation != null) {
      for (int i=0; i<_Operation.length; i++) {
        if (_Operation[i] != null) {
          _f_Operation.add(_Operation[i]);    
        }
      }
    }
  }
  /**
   * Get method for element {}operation
   */
  public com.sap.engine.services.webservices.espbase.mappings.OperationMapping[] getOperation() {
    OperationMapping[] result = new OperationMapping[_f_Operation.size()];
    _f_Operation.toArray(result);
    return result;        
  }
  /**
   * Add method for element {}operation
   * @param _Operation
   */
  public void addOperation(OperationMapping _Operation) {
    if (_Operation != null) {
      _f_Operation.add(_Operation);
    }
  }
  
  /**
   * Reference to WSDL PortType QName.
   * @param portTypeName
   */
  public void setPortType(QName portTypeName) {
    super.setProperty(PORT_TYPE_NAME,portTypeName.toString());
  }
  
  /**
   * Returns the reference to WSDL PortType QName.
   * @return
   */
  public QName getPortType() {
    if (super.getProperty(PORT_TYPE_NAME) == null) {
      return null;
    }
    return QName.valueOf(super.getProperty(PORT_TYPE_NAME));
  }
  
  /**
   * Returns puvblic ID of transport binding responsible for this interface.
   * @return
   */
  public String getBindingID() {
    return super.getProperty(BINDING_ID);
  }
  
  /**
   * Sets the binding id of this interface.
   * @param bindingId
   */
  public void setBindingType(String bindingId) {
    super.setProperty(BINDING_TYPE,bindingId);
  }
  
  
  /**
   * Set's Service Endpint Interface (SEI) name that is mapped to this PortType.
   * @param seiName
   */
  public void setSEIName(String seiName) {
    super.setProperty(SEI_NAME,seiName); 
  }
  
  /**
   * Returns Service Endpoint Interface (SEI) name that is mapped to this portType.
   * @return
   */
  public String getSEIName() {
    return super.getProperty(SEI_NAME);
  }
  
  /**
   * Returns Operation mapping by given WSDL operation name.
   * @param wsdlOperationName
   * @return
   */
  public OperationMapping getOperationByWSDLName(String wsdlOperationName) {
    for (int i=0; i<_f_Operation.size();i++) {
      OperationMapping operation = (OperationMapping) _f_Operation.get(i);
      if (operation.getWSDLOperationName().equals(wsdlOperationName)) {
        return operation;
      }
    }
    return null;
  }
  
  /**
   * Returns Operation mapping by given Java operation name.
   * @param javaOperationName
   * @return
   */ 
  public OperationMapping getOperationByJavaName(String javaOperationName) {
    for (int i=0; i<_f_Operation.size();i++) {
      OperationMapping operation = (OperationMapping) _f_Operation.get(i);
      if (operation.getJavaMethodName().equals(javaOperationName)) {
        return operation;
      }
    }
    return null;
  }
    
  /**
   * Sets binding name for this interface.
   * @param bindingName
   */
  public void setBindingQName(QName bindingName) {
    super.setProperty(BINDING_NAME,bindingName.toString());   
  }
  /**
   * Returns binding name for this interface.
   * @return
   */
  public QName getBindingQName() {
    if (super.getProperty(BINDING_NAME) == null) {
      return null;
    }
    return QName.valueOf(super.getProperty(BINDING_NAME));
  }
  /**
   * @return type of the binding - the value mapped under #BINDING_TYPE property name. Null is returned if not mapped
   */
  public String getBindingType() {
    return getProperty(BINDING_TYPE);
  }
  /**
   * Sets 'outsideIn' flag of this interface.
   * @param flag
   */
  public void setOusideInInterfaceFlag(boolean flag) {
    setProperty(OUTSIDE_IN_INTERFACE, Boolean.toString(flag));
  }
  /**
   * Sets 'jaxwsInterface' flag of this interface.
   * @param flag
   */
  public void setJAXWSInterfaceFlag(boolean flag) {
    setProperty(JAXWS_INTERFACE, Boolean.toString(flag));
  }
  /**
   * Sets 'jaxwsProviderInterface' flag of this interface.
   * @param flag
   */
  public void setJAXWSProviderInterfaceFlag(boolean flag) {
    setProperty(JAXWS_PROVIDER_INTERFACE, Boolean.toString(flag));
  }
  
  // i044259
  public void setPortQName(QName portName){
    super.setProperty(PORT_NAME, portName.toString());
  }
  
  public QName getPortQName(){
    if (super.getProperty(PORT_NAME) == null) {
      return null;
    }
    return QName.valueOf(super.getProperty(PORT_NAME));
  }
  
  public void setServiceQName(QName serviceName){
    super.setProperty(SERVICE_NAME, serviceName.toString());
  }
  
  public QName getServiceQName(){
    if (super.getProperty(SERVICE_NAME) == null) {
      return null;
    }
    return QName.valueOf(super.getProperty(SERVICE_NAME));
  }
  
  public void setGalaxyInterfaceFlag(boolean flag) {
    setProperty(GALAXY_INTERFACE, Boolean.toString(flag));
  }
  
  public void setSDOInterfaceFlag(boolean flag) {
    setProperty(SDO_INTERFACE, Boolean.toString(flag));
  }
  
  //report that it is Galaxy for SDO case. So far for both the behavior is the same. If needed in the future separation would be made.
  public boolean isGalaxyInterface() { 
    return Boolean.valueOf(getProperty(GALAXY_INTERFACE)).booleanValue() || Boolean.valueOf(getProperty(SDO_INTERFACE)).booleanValue(); 
  }

  /**
   * @return true only if 'ousideIn' flag of this interface is set to true. Otherwise false is returned.
   */
  public boolean isOutsideInInterface() {
    return Boolean.valueOf(getProperty(OUTSIDE_IN_INTERFACE)).booleanValue(); 
  }
  /**
   * @return true only if 'jaxwsInterface' flag of this interface is set to true. Otherwise false is returned.
   */
  public boolean isJAXWSInterface() {
    return Boolean.valueOf(getProperty(JAXWS_INTERFACE)).booleanValue(); 
  }
  /**
   * @return true only if 'jaxwsProviderInterface' flag of this interface is set to true. Otherwise false is returned.
   */
  public boolean isJAXWSProviderInterface() {
    return Boolean.valueOf(getProperty(JAXWS_PROVIDER_INTERFACE)).booleanValue(); 
  }
  
  // Element field for element {}implementation-link
  private com.sap.engine.services.webservices.espbase.mappings.ImplementationLink _f_ImplementationLink;
  /**
   * Set method for element {}implementation-link
   */
  public void setImplementationLink(com.sap.engine.services.webservices.espbase.mappings.ImplementationLink _ImplementationLink) {
    this._f_ImplementationLink = _ImplementationLink;
  }
  /**
   * Get method for element {}implementation-link
   */
  public com.sap.engine.services.webservices.espbase.mappings.ImplementationLink getImplementationLink() {
    return this._f_ImplementationLink;
  }
  /**
   * Setter for http request method. This method is relevant only in the binding is http.
   */
  public void setHTTPRequestMethod(String httpRequestMethod) {
    setProperty(HTTP_REQUEST_METHOD, httpRequestMethod);
  }
  /**
   * Getter for http request method. This method is relevant only in the binding is http.
   */
  public String getHTTPRequestMethod() {
    return(getProperty(HTTP_REQUEST_METHOD));
  }
}
