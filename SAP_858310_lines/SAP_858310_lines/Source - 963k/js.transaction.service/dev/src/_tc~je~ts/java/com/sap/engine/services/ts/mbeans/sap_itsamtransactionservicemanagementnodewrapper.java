/*
 This file is generated by Code Generator
 to wrap datatypes of attributes of CIMClass SAP_ITSAMTransactionServiceManagementNode
 WARNING:DO NOT CHANGE THE CODE MANUALLY. 
 */
package com.sap.engine.services.ts.mbeans;

import java.util.Date;

import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.openmbean.ArrayType;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;

public class SAP_ITSAMTransactionServiceManagementNodeWrapper implements
		DynamicMBean {

	/* The wrapped object to be exposed as MBean */
	private SAP_ITSAMTransactionServiceManagementNode mbean;

	/* MBeanInfo */
	private static final MBeanInfo mbeanInfo;

	/* Initialize MBeanInfo */
	static {
		// attributes

		MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[24];

		attributeInfo[0] = new MBeanAttributeInfo("TransactionStatistics",
				"javax.management.openmbean.CompositeData", "Description:",
				true, false, false);

		attributeInfo[1] = new MBeanAttributeInfo("TransactionStatisticsPerRM",
				"[Ljavax.management.openmbean.CompositeData;", "Description:",
				true, false, false);

		attributeInfo[2] = new MBeanAttributeInfo(
				"TransactionStatisticsPerTxClassifier",
				"[Ljavax.management.openmbean.CompositeData;", "Description:",
				true, false, false);

		attributeInfo[3] = new MBeanAttributeInfo("PendingTransactions",
				"[Ljavax.management.openmbean.CompositeData;", "Description:",
				true, false, false);

		attributeInfo[4] = new MBeanAttributeInfo("SystemCreationClassName",
				"java.lang.String",
				"Description:The scoping System's CreationClassName.", true,
				false, false);

		attributeInfo[5] = new MBeanAttributeInfo("SystemName",
				"java.lang.String", "Description:The scoping System's Name.",
				true, false, false);

		attributeInfo[6] = new MBeanAttributeInfo(
				"CreationClassName",
				"java.lang.String",
				"Description:CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.",
				true, false, false);

		attributeInfo[7] = new MBeanAttributeInfo(
				"Name",
				"java.lang.String",
				"Description:The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.",
				true, false, false);

		attributeInfo[8] = new MBeanAttributeInfo(
				"PrimaryOwnerName",
				"java.lang.String",
				"Description:The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.",
				true, true, false);

		attributeInfo[9] = new MBeanAttributeInfo(
				"PrimaryOwnerContact",
				"java.lang.String",
				"Description:A string that provides information on how the primary owner of the Service can be reached (e.g. phone number, email address, ...).",
				true, true, false);

		attributeInfo[10] = new MBeanAttributeInfo(
				"StartMode",
				"java.lang.String",
				"Description:StartMode is a string value indicating whether the Service is automatically started by a System, Operating System, etc. or only started upon request. This property is deprecated in lieu of the EnabledDefault property inherited from EnabledLogicalElement, which addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, StartMode was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved, clarified definition using EnabledDefault.",
				true, false, false);

		attributeInfo[11] = new MBeanAttributeInfo(
				"Started",
				"boolean",
				"Description:Started is a boolean indicating whether the Service has been started (TRUE), or stopped (FALSE).",
				true, false, false);

		attributeInfo[12] = new MBeanAttributeInfo(
				"EnabledState",
				"short",
				"Description:EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: Enabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. Disabled (3) indicates that the element will not execute commands and will drop any new requests. Shutting Down (4) indicates that the element is in the process of going to a Disabled state. Not Applicable (5) indicates the element doesn't support being enabled/disabled. Enabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. Test (7) indicates that the element is in a test state. Deferred (8) indicates that the element may be completing commands, but will queue any new requests. Quiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. Starting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.",
				true, false, false);

		attributeInfo[13] = new MBeanAttributeInfo(
				"OtherEnabledState",
				"java.lang.String",
				"Description:A string describing the element's enabled/disabled state when the EnabledState property is set to 1 (\"Other\"). This property MUST be set to NULL when EnabledState is any value other than 1.",
				true, false, false);

		attributeInfo[14] = new MBeanAttributeInfo(
				"RequestedState",
				"short",
				"Description:RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 (\"Not Applicable\"), then this property has no meaning. By default, the element's RequestedState is 5 (\"No Change\"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. It should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" (11). The former, Reboot, refers to doing a \"Shut Down\" and then moving to an \"Enabled\" state. The latter, Reset, indicates that the element is first \"Disabled\" and then \"Enabled\". The distinction between requesting \"Shut Down\" and \"Disabled\" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. This property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.",
				true, false, false);

		attributeInfo[15] = new MBeanAttributeInfo(
				"EnabledDefault",
				"short",
				"Description:An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is \"Enabled\" (value=2).",
				true, true, false);

		attributeInfo[16] = new MBeanAttributeInfo(
				"TimeOfLastStateChange",
				"java.util.Date",
				"Description:The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.",
				true, false, false);

		attributeInfo[17] = new MBeanAttributeInfo(
				"InstallDate",
				"java.util.Date",
				"Description:A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.",
				true, false, false);

		attributeInfo[18] = new MBeanAttributeInfo(
				"Status",
				"java.lang.String",
				"Description:A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.",
				true, false, false);

		attributeInfo[19] = new MBeanAttributeInfo(
				"OperationalStatus",
				"[S",
				"Description:Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \"Stressed\" indicates that the element is functioning, but needs attention. Examples of \"Stressed\" states are overload, overheated, etc. \"Predictive Failure\" indicates that an element is functioning nominally but predicting a failure in the near future. \"In Service\" describes an element being configured, maintained, cleaned, or otherwise administered. \"No Contact\" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \"Lost Communication\" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \"Stopped\" and \"Aborted\" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \"Dormant\" indicates that the element is inactive or quiesced. \"Supporting Entity in Error\" describes that this element may be \"OK\" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \"Completed\" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \"Power Mode\" indicates the element has additional power model information contained in the Associated PowerManagementService association. OperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.",
				true, false, false);

		attributeInfo[20] = new MBeanAttributeInfo(
				"StatusDescriptions",
				"[Ljava.lang.String;",
				"Description:Strings describing the various OperationalStatus array values. For example, if \"Stopping\" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.",
				true, false, false);

		attributeInfo[21] = new MBeanAttributeInfo(
				"Caption",
				"java.lang.String",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				true, false, false);

		attributeInfo[22] = new MBeanAttributeInfo(
				"Description",
				"java.lang.String",
				"Description:The Description property provides a textual description of the object.",
				true, false, false);

		attributeInfo[23] = new MBeanAttributeInfo(
				"ElementName",
				"java.lang.String",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.",
				true, false, false);

		// operations
		MBeanParameterInfo[] signature;
		MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[7];

		// for method retrievePendingTransactionInfo
		signature = new MBeanParameterInfo[4];
		signature[0] = new MBeanParameterInfo("systemId", "java.lang.String",
				"Description:");
		signature[1] = new MBeanParameterInfo("nodeId", "int", "Description:");
		signature[2] = new MBeanParameterInfo("tmStartupTime", "long",
				"Description:");
		signature[3] = new MBeanParameterInfo("transactionSeqNumber", "long",
				"Description:");
		operationInfo[0] = new MBeanOperationInfo(
				"retrievePendingTransactionInfo",
				"Description:etrievePendingTransactionInfo(systemId[]:uint8 {In},nodeId: uint32 {In},tmStartupTime:uint64 {In},transactionSeqNumber:uint64 {In}, result:string{EmbeddedInstance=SAP_ITSAMExtendedPendingTransactionData, out}): uint32",
				signature, "javax.management.openmbean.CompositeData",
				MBeanOperationInfo.UNKNOWN);

		// for method abandonTransaction
		signature = new MBeanParameterInfo[4];
		signature[0] = new MBeanParameterInfo("systemId", "java.lang.String",
				"Description:");
		signature[1] = new MBeanParameterInfo("nodeId", "int", "Description:");
		signature[2] = new MBeanParameterInfo("tmStartupTime", "long",
				"Description:");
		signature[3] = new MBeanParameterInfo("transactionSeqNumber", "long",
				"Description:");
		operationInfo[1] = new MBeanOperationInfo(
				"abandonTransaction",
				"Description:bandonTransaction(systemId[]:uint8 {In},nodeId: uint32 {In},tmStartupTime:uint64 {In},transactionSeqNumber:uint64 {In}): uint32",
				signature, "javax.management.openmbean.CompositeData",
				MBeanOperationInfo.UNKNOWN);

		// for method forgetTransaction
		signature = new MBeanParameterInfo[4];
		signature[0] = new MBeanParameterInfo("systemId", "java.lang.String",
				"Description:");
		signature[1] = new MBeanParameterInfo("nodeId", "int", "Description:");
		signature[2] = new MBeanParameterInfo("tmStartupTime", "long",
				"Description:");
		signature[3] = new MBeanParameterInfo("transactionSeqNumber", "long",
				"Description:");
		operationInfo[2] = new MBeanOperationInfo(
				"forgetTransaction",
				"Description:orgetTransaction(systemId[]:uint8 {In},nodeId: uint32 {In},tmStartupTime:uint64 {In},transactionSeqNumber:uint64 {In}): uint32",
				signature, "javax.management.openmbean.CompositeData",
				MBeanOperationInfo.UNKNOWN);

		// for method clearTransactionsStatistics
		signature = new MBeanParameterInfo[0];
		operationInfo[3] = new MBeanOperationInfo(
				"clearTransactionsStatistics",
				"Description:Description Missing", signature, "void",
				MBeanOperationInfo.UNKNOWN);

		// for method StartService
		signature = new MBeanParameterInfo[0];
		operationInfo[4] = new MBeanOperationInfo(
				"StartService",
				"Description:The StartService method places the Service in the started state. Note that this method's function overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (i.e., a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported and any other number to indicate an error. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are 'translated' may also be specified in the subclass as a Values array qualifier. Note that this method overlaps in semantics with the RequestStateChange method inherited from EnabledLogicalElement. This method is maintained since it has been widely implemented, and its simple 'start' semantics are convenient to use.",
				signature, "void", MBeanOperationInfo.UNKNOWN);

		// for method StopService
		signature = new MBeanParameterInfo[0];
		operationInfo[5] = new MBeanOperationInfo(
				"StopService",
				"Description:The StopService method places the Service in the stopped state. Note that this method's function overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (i.e., a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported and any other number to indicate an error. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are 'translated' may also be specified in the subclass as a Values array qualifier. Note that this method overlaps in semantics with the RequestStateChange method inherited from EnabledLogicalElement. This method is maintained since it has been widely implemented, and its simple 'stop' semantics are convenient to use.",
				signature, "void", MBeanOperationInfo.UNKNOWN);

		// for method RequestStateChange
		signature = new MBeanParameterInfo[2];
		signature[0] = new MBeanParameterInfo(
				"RequestedState",
				"short",
				"Description:The state requested for the element. This information will be placed into the instance's RequestedState property if the RequestStateChange method's return code is 0, 3, or 4096 (0x1000) - 'Completed with No Error', 'Timeout', or 'Job Started' respectively. Refer to the description of the EnabledState and RequestedState properties for the detailed meanings of the RequestedState values.");
		signature[1] = new MBeanParameterInfo(
				"TimeoutPeriod",
				"java.util.Date",
				"Description:A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format MUST be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. If this property does not contain 0 or null and the implementation doesn't support this parameter. A return code of 'Use Of Timeout Parameter Not Supported' MUST be returned.");
		operationInfo[6] = new MBeanOperationInfo(
				"RequestStateChange",
				"Description:Requests that the element's state be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the element's EnabledState and RequestedState will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten/lost. If 0 is returned, then the task completed successfully and the use of ConcreteJob was not required. If 4096 (0x1000) is returned, then the task will take some time to complete, ConcreteJob will be created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.",
				signature, "javax.management.ObjectName",
				MBeanOperationInfo.UNKNOWN);

		mbeanInfo = new MBeanInfo("SAP_ITSAMTransactionServiceManagementNode",
				"SAP_ITSAMTransactionServiceManagementNode MBean",
				attributeInfo, null, operationInfo, null);

	}

	/*
	 * Wraps given SAP_ITSAMTransactionServiceManagementNode and provides a
	 * javax.management.DynamicMBean interface on top
	 */
	public SAP_ITSAMTransactionServiceManagementNodeWrapper(
			SAP_ITSAMTransactionServiceManagementNode mbean) {
		this.mbean = mbean;
	}

	/*
	 * Creates an empty wrapper for SAP_ITSAMTransactionServiceManagementNode
	 */
	public SAP_ITSAMTransactionServiceManagementNodeWrapper() {
	}

	/*
	 * Sets a new SAP_ITSAMTransactionServiceManagementNode to be wrapped and
	 * returns the old one
	 */
	public SAP_ITSAMTransactionServiceManagementNode setManagedObject(
			SAP_ITSAMTransactionServiceManagementNode mbean) {
		SAP_ITSAMTransactionServiceManagementNode old = this.mbean;
		this.mbean = mbean;
		return old;
	}

	/*
	 * Returns the currently wrapped SAP_ITSAMTransactionServiceManagementNode
	 */
	public SAP_ITSAMTransactionServiceManagementNode getManagedObject() {
		return this.mbean;
	}

	/*
	 * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
	 */
	public AttributeList getAttributes(String[] attributes) {

		AttributeList list = new AttributeList();
		// Check attributeNames to avoid NullPointerException later on
		if (attributes == null) {
			throw new RuntimeOperationsException(new IllegalArgumentException(
					"attributeNames[] cannot be null"),
					"Cannot invoke a getter of SAP_ITSAMShortDumpManagementService");
		}
		// if attributeNames is empty, return an empty result list
		if (attributes.length == 0)
			return list;

		if (attributes != null) {
			for (int i = 0; i < attributes.length; i++) {
				String attribute = attributes[i];
				try {
					Object result = getAttribute(attribute);
					list.add(new Attribute(attribute, result));
				} catch (AttributeNotFoundException ignored) {
					// $JL-EXC$
				} catch (MBeanException ignored) {
					// $JL-EXC$
				} catch (ReflectionException ignored) {
					// $JL-EXC$
				}
			}

		}
		return list;
	}

	/**
	 * @see javax.management.DynamicMBean#setAttributes(javax.management.AttributeList)
	 */
	public AttributeList setAttributes(AttributeList attributes) {
		// Check attributesto avoid NullPointerException later on
		if (attributes == null) {
			throw new RuntimeOperationsException(new IllegalArgumentException(
					"AttributeList attributes cannot be null"),
					"Cannot invoke a setter of SAP_ITSAMShortDumpManagementService");
		}

		AttributeList list = new AttributeList();

		// if attributeNames is empty, nothing more to do
		if (attributes.isEmpty())
			return list;
		if (attributes != null) {
			for (int i = 0; i < attributes.size(); ++i) {
				Attribute attribute = (Attribute) attributes.get(i);
				try {
					setAttribute(attribute);
					list.add(attribute);
				} catch (AttributeNotFoundException ignored) {
					// $JL-EXC$
				} catch (InvalidAttributeValueException ignored) {
					// $JL-EXC$
				} catch (MBeanException ignored) {
					// $JL-EXC$
				} catch (ReflectionException ignored) {
					// $JL-EXC$
				}
			}
		}

		return list;
	}

	/**
	 * @see javax.management.DynamicMBean#getMBeanInfo()
	 */
	public MBeanInfo getMBeanInfo() {
		return mbeanInfo;
	}

	/**
	 * @see javax.management.DynamicMBean
	 *      \#setAttribute(javax.management.Attribute)
	 */
	public void setAttribute(Attribute attr) throws AttributeNotFoundException,
			InvalidAttributeValueException, MBeanException, ReflectionException {
		String name = attr.getName();

		if (name.equalsIgnoreCase("PrimaryOwnerName"))

			mbean.setPrimaryOwnerName((String) attr.getValue());

		if (name.equalsIgnoreCase("PrimaryOwnerContact"))

			mbean.setPrimaryOwnerContact((String) attr.getValue());

		if (name.equalsIgnoreCase("EnabledDefault"))

			mbean.setEnabledDefault(((Short) attr.getValue()).shortValue());

	}

	/**
	 * @see javax.management.DynamicMBean#invoke(java.lang.String,
	 *      java.lang.Object[], java.lang.String[])
	 */
	public Object invoke(String operationName, Object param[],
			String signature[]) throws MBeanException, ReflectionException {
		if (operationName == null) {
			throw new RuntimeOperationsException(new IllegalArgumentException(
					"Operation name cannot be null"),
					"Cannot invoke a null operation in "
							+ "SAP_ITSAMTransactionServiceManagementNode");
		}

		if (operationName.equalsIgnoreCase("retrievePendingTransactionInfo")
				&& (signature[0].equals("java.lang.String") || signature[0]
						.equalsIgnoreCase("string"))
				&& (signature[1].equals("java.lang.Integer") || signature[1]
						.equalsIgnoreCase("int"))
				&& (signature[2].equals("java.lang.Long") || signature[2]
						.equalsIgnoreCase("long"))
				&& (signature[3].equals("java.lang.Long") || signature[3]
						.equalsIgnoreCase("long"))) {
			try {
				return getCDataForSAP_ITSAMExtendedPendingTransactionData(mbean
						.retrievePendingTransactionInfo((String) param[0],
								((Integer) param[1]).intValue(),
								((Long) param[2]).longValue(),
								((Long) param[3]).longValue()));
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		}

		if (operationName.equalsIgnoreCase("abandonTransaction")
				&& (signature[0].equals("java.lang.String") || signature[0]
						.equalsIgnoreCase("string"))
				&& (signature[1].equals("java.lang.Integer") || signature[1]
						.equalsIgnoreCase("int"))
				&& (signature[2].equals("java.lang.Long") || signature[2]
						.equalsIgnoreCase("long"))
				&& (signature[3].equals("java.lang.Long") || signature[3]
						.equalsIgnoreCase("long"))) {
			try {
				return getCDataForSAP_ITSAMJ2eeActionStatus(mbean
						.abandonTransaction((String) param[0],
								((Integer) param[1]).intValue(),
								((Long) param[2]).longValue(),
								((Long) param[3]).longValue()));
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		}

		if (operationName.equalsIgnoreCase("forgetTransaction")
				&& (signature[0].equals("java.lang.String") || signature[0]
						.equalsIgnoreCase("string"))
				&& (signature[1].equals("java.lang.Integer") || signature[1]
						.equalsIgnoreCase("int"))
				&& (signature[2].equals("java.lang.Long") || signature[2]
						.equalsIgnoreCase("long"))
				&& (signature[3].equals("java.lang.Long") || signature[3]
						.equalsIgnoreCase("long"))) {
			try {
				return getCDataForSAP_ITSAMJ2eeActionStatus(mbean
						.forgetTransaction((String) param[0],
								((Integer) param[1]).intValue(),
								((Long) param[2]).longValue(),
								((Long) param[3]).longValue()));
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		}

		if (operationName.equalsIgnoreCase("clearTransactionsStatistics")
				&& signature.length == 0) {
			mbean.clearTransactionsStatistics();
			return null;
		}

		if (operationName.equalsIgnoreCase("StartService")
				&& signature.length == 0) {
			mbean.StartService();
			return null;
		}

		if (operationName.equalsIgnoreCase("StopService")
				&& signature.length == 0) {
			mbean.StopService();
			return null;
		}

		if (operationName.equalsIgnoreCase("RequestStateChange")
				&& (signature[0].equals("java.lang.Short") || signature[0]
						.equalsIgnoreCase("short"))
				&& (signature[1].equals("java.sql.Date") || signature[1]
						.equals("java.util.Date"))) {
			return mbean.RequestStateChange(((Short) param[0]).shortValue(),
					(Date) param[1]);

		}

		else {
			// unrecognized operation name:
			throw new ReflectionException(new NoSuchMethodException(
					operationName), "Cannot find the operation "
					+ operationName + " in "
					+ "SAP_ITSAMTransactionServiceManagementNode");
		}
	}

	/*
	 * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
	 */
	public Object getAttribute(String arg0) throws AttributeNotFoundException,
			MBeanException, ReflectionException {
		if (arg0 == null)
			throw new RuntimeOperationsException(new IllegalArgumentException(
					"Attribute name cannot be null"),
					"Cannot invoke a getter of "
							+ "SAP_ITSAMTransactionServiceManagementNode"
							+ " with null attribute name");
		if (arg0.equalsIgnoreCase("TransactionStatistics"))
			try {
				return getCDataForSAP_ITSAMTransactionStatisticsData(mbean
						.getTransactionStatistics());
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		if (arg0.equalsIgnoreCase("TransactionStatisticsPerRM"))
			try {
				return getCDataArrForSAP_ITSAMTransactionStatisticsData(mbean
						.getTransactionStatisticsPerRM());
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		if (arg0.equalsIgnoreCase("TransactionStatisticsPerTxClassifier"))
			try {
				return getCDataArrForSAP_ITSAMTransactionStatisticsData(mbean
						.getTransactionStatisticsPerTxClassifier());
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		if (arg0.equalsIgnoreCase("PendingTransactions"))
			try {
				return getCDataArrForSAP_ITSAMPendingTransactionData(mbean
						.getPendingTransactions());
			} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}
		if (arg0.equalsIgnoreCase("SystemCreationClassName"))
			return mbean.getSystemCreationClassName();

		if (arg0.equalsIgnoreCase("SystemName"))
			return mbean.getSystemName();

		if (arg0.equalsIgnoreCase("CreationClassName"))
			return mbean.getCreationClassName();

		if (arg0.equalsIgnoreCase("Name"))
			return mbean.getName();

		if (arg0.equalsIgnoreCase("PrimaryOwnerName"))
			return mbean.getPrimaryOwnerName();

		if (arg0.equalsIgnoreCase("PrimaryOwnerContact"))
			return mbean.getPrimaryOwnerContact();

		if (arg0.equalsIgnoreCase("StartMode"))
			return mbean.getStartMode();

		if (arg0.equalsIgnoreCase("Started"))
			return new Boolean(mbean.getStarted());

		if (arg0.equalsIgnoreCase("EnabledState"))
			return new Short(mbean.getEnabledState());

		if (arg0.equalsIgnoreCase("OtherEnabledState"))
			return mbean.getOtherEnabledState();

		if (arg0.equalsIgnoreCase("RequestedState"))
			return new Short(mbean.getRequestedState());

		if (arg0.equalsIgnoreCase("EnabledDefault"))
			return new Short(mbean.getEnabledDefault());

		if (arg0.equalsIgnoreCase("TimeOfLastStateChange"))
			return mbean.getTimeOfLastStateChange();

		if (arg0.equalsIgnoreCase("InstallDate"))
			return mbean.getInstallDate();

		if (arg0.equalsIgnoreCase("Status"))
			return mbean.getStatus();

		if (arg0.equalsIgnoreCase("OperationalStatus"))
			return mbean.getOperationalStatus();

		if (arg0.equalsIgnoreCase("StatusDescriptions"))
			return mbean.getStatusDescriptions();

		if (arg0.equalsIgnoreCase("Caption"))
			return mbean.getCaption();

		if (arg0.equalsIgnoreCase("Description"))
			return mbean.getDescription();

		if (arg0.equalsIgnoreCase("ElementName"))
			return mbean.getElementName();

		else {
			throw (new AttributeNotFoundException("Cannot find " + arg0
					+ " attribute"));
		}

	}

	// Conversion methods for CompositeData type Class SAP_ITSAMJ2eeActionStatus
	public static CompositeData getCDataForSAP_ITSAMJ2eeActionStatus(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMJ2eeActionStatus metric)
			throws OpenDataException {
		if (metric == null) {
			return null;
		} else {
			String[] attrnames = { "Code", "MessageId", "MessageParameters",
					"StackTrace", "Caption", "Description", "ElementName" };
			Object[] attrobj = { metric.getCode(), metric.getMessageId(),
					metric.getMessageParameters(), metric.getStackTrace(),
					metric.getCaption(), metric.getDescription(),
					metric.getElementName() };

			return new CompositeDataSupport(
					getCTypeForSAP_ITSAMJ2eeActionStatus(), attrnames, attrobj);
		}
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMJ2eeActionStatus getSAP_ITSAMJ2eeActionStatusForCData(
			CompositeData data) {
		if (data == null) {
			return null;
		} else {

			/*
			 * throw an exception if the value of any key property is null in
			 * CData
			 */

			/*
			 * Initializes the read-only properties to default values if the
			 * value is null in CData with in the constructor
			 */

			com.sap.engine.services.ts.mbeans.SAP_ITSAMJ2eeActionStatus result = new com.sap.engine.services.ts.mbeans.SAP_ITSAMJ2eeActionStatus(
					(String) data.get("Caption"), (String) data
							.get("Description"), (String) data
							.get("ElementName"));

			if (data.get("Code") != null) {
				result.setCode((String) data.get("Code"));
			}
			if (data.get("MessageId") != null) {
				result.setMessageId((String) data.get("MessageId"));
			}
			if (data.get("MessageParameters") != null) {
				result.setMessageParameters((String[]) data
						.get("MessageParameters"));
			}
			if (data.get("StackTrace") != null) {
				result.setStackTrace((String) data.get("StackTrace"));
			}
			return result;
		}
	}

	public static CompositeType getCTypeForSAP_ITSAMJ2eeActionStatus()
			throws OpenDataException {
		String[] itemNames = { "Code", "MessageId", "MessageParameters",
				"StackTrace", "Caption", "Description", "ElementName" };
		String[] itemDescriptions = {
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				"Description:The Description property provides a textual description of the object.",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties." };
		OpenType[] itemTypes = { SimpleType.STRING, SimpleType.STRING,
				new ArrayType(1, SimpleType.STRING), SimpleType.STRING,
				SimpleType.STRING, SimpleType.STRING, SimpleType.STRING };

		return new CompositeType(
				"SAP_ITSAMJ2eeActionStatus",
				"Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",
				itemNames, itemDescriptions, itemTypes);
	}

	// Conversion methods for CompositeData type Class SAP_ITSAMRMData
	public static CompositeData getCDataForSAP_ITSAMRMData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData metric)
			throws OpenDataException {
		if (metric == null) {
			return null;
		} else {
			String[] attrnames = { "RMID", "RMName", "OverallStatusId",
					"OverallStatusParams", "TransactionRelatedStatusId",
					"TransactionRelatedStatusParams", "ActionStatus",
					"Caption", "Description", "ElementName" };
			Object[] attrobj = {
					new Integer(metric.getRMID()),
					metric.getRMName(),
					metric.getOverallStatusId(),
					metric.getOverallStatusParams(),
					metric.getTransactionRelatedStatusId(),
					metric.getTransactionRelatedStatusParams(),
					getCDataForSAP_ITSAMJ2eeActionStatus(metric
							.getActionStatus()), metric.getCaption(),
					metric.getDescription(), metric.getElementName() };

			return new CompositeDataSupport(getCTypeForSAP_ITSAMRMData(),
					attrnames, attrobj);
		}
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData getSAP_ITSAMRMDataForCData(
			CompositeData data) {
		if (data == null) {
			return null;
		} else {

			/*
			 * throw an exception if the value of any key property is null in
			 * CData
			 */

			/*
			 * Initializes the read-only properties to default values if the
			 * value is null in CData with in the constructor
			 */

			com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData result = new com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData(
					data.get("RMID") == null ? 0 : ((Integer) data.get("RMID"))
							.intValue(), (String) data.get("RMName"),
					(String) data.get("OverallStatusId"), (String[]) data
							.get("OverallStatusParams"), (String) data
							.get("TransactionRelatedStatusId"), (String[]) data
							.get("TransactionRelatedStatusParams"),
					(String) data.get("Caption"), (String) data
							.get("Description"), (String) data
							.get("ElementName"));

			if (data.get("ActionStatus") != null) {
				result
						.setActionStatus(getSAP_ITSAMJ2eeActionStatusForCData((CompositeData) data
								.get("ActionStatus")));
			}
			return result;
		}
	}

	public static CompositeType getCTypeForSAP_ITSAMRMData()
			throws OpenDataException {
		String[] itemNames = { "RMID", "RMName", "OverallStatusId",
				"OverallStatusParams", "TransactionRelatedStatusId",
				"TransactionRelatedStatusParams", "ActionStatus", "Caption",
				"Description", "ElementName" };
		String[] itemDescriptions = {
				"Description:",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:",
				"Description:Description Missing",
				"Description:Description Missing",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				"Description:The Description property provides a textual description of the object.",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties." };
		OpenType[] itemTypes = { SimpleType.INTEGER, SimpleType.STRING,
				SimpleType.STRING, new ArrayType(1, SimpleType.STRING),
				SimpleType.STRING, new ArrayType(1, SimpleType.STRING),
				getCTypeForSAP_ITSAMJ2eeActionStatus(), SimpleType.STRING,
				SimpleType.STRING, SimpleType.STRING };

		return new CompositeType(
				"SAP_ITSAMRMData",
				"Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",
				itemNames, itemDescriptions, itemTypes);
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData[] getSAP_ITSAMRMDataArrForCData(
			CompositeData[] cd) {
		if (cd == null) {
			return null;
		} else {
			com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData[] arr = new com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData[cd.length];
			for (int i = 0; i < cd.length; i++)
				arr[i] = getSAP_ITSAMRMDataForCData(cd[i]);
			return arr;
		}
	}

	public static CompositeData[] getCDataArrForSAP_ITSAMRMData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMRMData[] crr)
			throws OpenDataException {
		if (crr == null) {
			return null;
		} else {
			CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
			for (int i = 0; i < crr.length; i++)
				cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMRMData(crr[i]);
			return cd;
		}
	}

	// Conversion methods for CompositeData type Class
	// SAP_ITSAMExtendedPendingTransactionData
	public static CompositeData getCDataForSAP_ITSAMExtendedPendingTransactionData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMExtendedPendingTransactionData metric)
			throws OpenDataException {
		if (metric == null) {
			return null;
		} else {
			String[] attrnames = { "Warnings", "RMs", "DetailedDescriptionId",
					"DetailedDescriptionParams", "AbandonSupported",
					"ForgetSupported", "SystemId", "NodeId", "TmStartupTime",
					"TransactionSeqNumber", "TransactionClassifier", "Status",
					"BriefDescriptionId", "BriefDescriptionParams",
					"ActionStatus", "Caption", "Description", "ElementName" };
			Object[] attrobj = {
					metric.getWarnings(),
					getCDataArrForSAP_ITSAMRMData(metric.getRMs()),
					metric.getDetailedDescriptionId(),
					metric.getDetailedDescriptionParams(),
					new Boolean(metric.getAbandonSupported()),
					new Boolean(metric.getForgetSupported()),
					metric.getSystemId(),
					new Integer(metric.getNodeId()),
					new Long(metric.getTmStartupTime()),
					new Long(metric.getTransactionSeqNumber()),
					metric.getTransactionClassifier(),
					metric.getStatus(),
					metric.getBriefDescriptionId(),
					metric.getBriefDescriptionParams(),
					getCDataForSAP_ITSAMJ2eeActionStatus(metric
							.getActionStatus()), metric.getCaption(),
					metric.getDescription(), metric.getElementName() };

			return new CompositeDataSupport(
					getCTypeForSAP_ITSAMExtendedPendingTransactionData(),
					attrnames, attrobj);
		}
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMExtendedPendingTransactionData getSAP_ITSAMExtendedPendingTransactionDataForCData(
			CompositeData data) {
		if (data == null) {
			return null;
		} else {

			/*
			 * throw an exception if the value of any key property is null in
			 * CData
			 */

			/*
			 * Initializes the read-only properties to default values if the
			 * value is null in CData with in the constructor
			 */

			com.sap.engine.services.ts.mbeans.SAP_ITSAMExtendedPendingTransactionData result = new com.sap.engine.services.ts.mbeans.SAP_ITSAMExtendedPendingTransactionData(
					(String[]) data.get("Warnings"),
					getSAP_ITSAMRMDataArrForCData((CompositeData[]) data
							.get("RMs")), (String) data
							.get("DetailedDescriptionId"), (String[]) data
							.get("DetailedDescriptionParams"), data
							.get("AbandonSupported") == null ? false
							: ((Boolean) data.get("AbandonSupported"))
									.booleanValue(), data
							.get("ForgetSupported") == null ? false
							: ((Boolean) data.get("ForgetSupported"))
									.booleanValue(), (String) data
							.get("SystemId"), data.get("NodeId") == null ? 0
							: ((Integer) data.get("NodeId")).intValue(), data
							.get("TmStartupTime") == null ? 0 : ((Long) data
							.get("TmStartupTime")).longValue(), data
							.get("TransactionSeqNumber") == null ? 0
							: ((Long) data.get("TransactionSeqNumber"))
									.longValue(), (String) data
							.get("TransactionClassifier"), (String) data
							.get("Status"), (String) data
							.get("BriefDescriptionId"), (String[]) data
							.get("BriefDescriptionParams"), (String) data
							.get("Caption"), (String) data.get("Description"),
					(String) data.get("ElementName"));

			if (data.get("ActionStatus") != null) {
				result
						.setActionStatus(getSAP_ITSAMJ2eeActionStatusForCData((CompositeData) data
								.get("ActionStatus")));
			}
			return result;
		}
	}

	public static CompositeType getCTypeForSAP_ITSAMExtendedPendingTransactionData()
			throws OpenDataException {
		String[] itemNames = { "Warnings", "RMs", "DetailedDescriptionId",
				"DetailedDescriptionParams", "AbandonSupported",
				"ForgetSupported", "SystemId", "NodeId", "TmStartupTime",
				"TransactionSeqNumber", "TransactionClassifier", "Status",
				"BriefDescriptionId", "BriefDescriptionParams", "ActionStatus",
				"Caption", "Description", "ElementName" };
		String[] itemDescriptions = {
				"Description:",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:Description Missing",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				"Description:The Description property provides a textual description of the object.",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties." };
		OpenType[] itemTypes = { new ArrayType(1, SimpleType.STRING),
				new ArrayType(1, getCTypeForSAP_ITSAMRMData()),
				SimpleType.STRING, new ArrayType(1, SimpleType.STRING),
				SimpleType.BOOLEAN, SimpleType.BOOLEAN, SimpleType.STRING,
				SimpleType.INTEGER, SimpleType.LONG, SimpleType.LONG,
				SimpleType.STRING, SimpleType.STRING, SimpleType.STRING,
				new ArrayType(1, SimpleType.STRING),
				getCTypeForSAP_ITSAMJ2eeActionStatus(), SimpleType.STRING,
				SimpleType.STRING, SimpleType.STRING };

		return new CompositeType(
				"SAP_ITSAMExtendedPendingTransactionData",
				"Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",
				itemNames, itemDescriptions, itemTypes);
	}

	// Conversion methods for CompositeData type Class
	// SAP_ITSAMTransactionStatisticsData
	public static CompositeData getCDataForSAP_ITSAMTransactionStatisticsData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData metric)
			throws OpenDataException {
		if (metric == null) {
			return null;
		} else {
			String[] attrnames = { "Name", "PendingTxCount",
					"TotalCompletedTx", "TotalCommittedTx",
					"TotalRollbackedTx", "ActiveTxCount", "SuspendedTxCount",
					"TxWithHeuristicOutcomesCount", "TxPassedAbandonTimeout",
					"TxRollbackedByApplication", "TxRollbackedBecauseRMError",
					"TimeoutedTxCount", "AverageCommitTime", "ActionStatus",
					"NotRecoveredTxCount", "Caption", "Description",
					"ElementName" };
			Object[] attrobj = {
					metric.getName(),
					new Long(metric.getPendingTxCount()),
					new Long(metric.getTotalCompletedTx()),
					new Long(metric.getTotalCommittedTx()),
					new Long(metric.getTotalRollbackedTx()),
					new Long(metric.getActiveTxCount()),
					new Long(metric.getSuspendedTxCount()),
					new Long(metric.getTxWithHeuristicOutcomesCount()),
					new Long(metric.getTxPassedAbandonTimeout()),
					new Long(metric.getTxRollbackedByApplication()),
					new Long(metric.getTxRollbackedBecauseRMError()),
					new Long(metric.getTimeoutedTxCount()),
					new Integer(metric.getAverageCommitTime()),
					getCDataForSAP_ITSAMJ2eeActionStatus(metric
							.getActionStatus()),
					new Long(metric.getNotRecoveredTxCount()),
					metric.getCaption(), metric.getDescription(),
					metric.getElementName() };

			return new CompositeDataSupport(
					getCTypeForSAP_ITSAMTransactionStatisticsData(), attrnames,
					attrobj);
		}
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData getSAP_ITSAMTransactionStatisticsDataForCData(
			CompositeData data) {
		if (data == null) {
			return null;
		} else {

			/*
			 * throw an exception if the value of any key property is null in
			 * CData
			 */

			/*
			 * Initializes the read-only properties to default values if the
			 * value is null in CData with in the constructor
			 */

			com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData result = new com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData(
					(String) data.get("Name"),
					data.get("PendingTxCount") == null ? 0 : ((Long) data
							.get("PendingTxCount")).longValue(), data
							.get("TotalCompletedTx") == null ? 0 : ((Long) data
							.get("TotalCompletedTx")).longValue(), data
							.get("TotalCommittedTx") == null ? 0 : ((Long) data
							.get("TotalCommittedTx")).longValue(), data
							.get("TotalRollbackedTx") == null ? 0
							: ((Long) data.get("TotalRollbackedTx"))
									.longValue(),
					data.get("ActiveTxCount") == null ? 0 : ((Long) data
							.get("ActiveTxCount")).longValue(), data
							.get("SuspendedTxCount") == null ? 0 : ((Long) data
							.get("SuspendedTxCount")).longValue(), data
							.get("TxWithHeuristicOutcomesCount") == null ? 0
							: ((Long) data.get("TxWithHeuristicOutcomesCount"))
									.longValue(), data
							.get("TxPassedAbandonTimeout") == null ? 0
							: ((Long) data.get("TxPassedAbandonTimeout"))
									.longValue(), data
							.get("TxRollbackedByApplication") == null ? 0
							: ((Long) data.get("TxRollbackedByApplication"))
									.longValue(), data
							.get("TxRollbackedBecauseRMError") == null ? 0
							: ((Long) data.get("TxRollbackedBecauseRMError"))
									.longValue(),
					data.get("TimeoutedTxCount") == null ? 0 : ((Long) data
							.get("TimeoutedTxCount")).longValue(), data
							.get("AverageCommitTime") == null ? 0
							: ((Integer) data.get("AverageCommitTime"))
									.intValue(), data
							.get("NotRecoveredTxCount") == null ? 0
							: ((Long) data.get("NotRecoveredTxCount"))
									.longValue(), (String) data.get("Caption"),
					(String) data.get("Description"), (String) data
							.get("ElementName"));

			if (data.get("ActionStatus") != null) {
				result
						.setActionStatus(getSAP_ITSAMJ2eeActionStatusForCData((CompositeData) data
								.get("ActionStatus")));
			}
			return result;
		}
	}

	public static CompositeType getCTypeForSAP_ITSAMTransactionStatisticsData()
			throws OpenDataException {
		String[] itemNames = { "Name", "PendingTxCount", "TotalCompletedTx",
				"TotalCommittedTx", "TotalRollbackedTx", "ActiveTxCount",
				"SuspendedTxCount", "TxWithHeuristicOutcomesCount",
				"TxPassedAbandonTimeout", "TxRollbackedByApplication",
				"TxRollbackedBecauseRMError", "TimeoutedTxCount",
				"AverageCommitTime", "ActionStatus", "NotRecoveredTxCount",
				"Caption", "Description", "ElementName" };
		String[] itemDescriptions = {
				"Description:",
				"Description:Description Missing",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:",
				"Description:",
				"Description:",
				"Description:=TxRollbackedBecaouseRMError:uint64",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:Description Missing",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				"Description:The Description property provides a textual description of the object.",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties." };
		OpenType[] itemTypes = { SimpleType.STRING, SimpleType.LONG,
				SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,
				SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,
				SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,
				SimpleType.LONG, SimpleType.INTEGER,
				getCTypeForSAP_ITSAMJ2eeActionStatus(), SimpleType.LONG,
				SimpleType.STRING, SimpleType.STRING, SimpleType.STRING };

		return new CompositeType(
				"SAP_ITSAMTransactionStatisticsData",
				"Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",
				itemNames, itemDescriptions, itemTypes);
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData[] getSAP_ITSAMTransactionStatisticsDataArrForCData(
			CompositeData[] cd) {
		if (cd == null) {
			return null;
		} else {
			com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData[] arr = new com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData[cd.length];
			for (int i = 0; i < cd.length; i++)
				arr[i] = getSAP_ITSAMTransactionStatisticsDataForCData(cd[i]);
			return arr;
		}
	}

	public static CompositeData[] getCDataArrForSAP_ITSAMTransactionStatisticsData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMTransactionStatisticsData[] crr)
			throws OpenDataException {
		if (crr == null) {
			return null;
		} else {
			CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
			for (int i = 0; i < crr.length; i++)
				cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMTransactionStatisticsData(crr[i]);
			return cd;
		}
	}

	// Conversion methods for CompositeData type Class
	// SAP_ITSAMPendingTransactionData
	public static CompositeData getCDataForSAP_ITSAMPendingTransactionData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData metric)
			throws OpenDataException {
		if (metric == null) {
			return null;
		} else {
			String[] attrnames = { "SystemId", "NodeId", "TmStartupTime",
					"TransactionSeqNumber", "TransactionClassifier", "Status",
					"BriefDescriptionId", "BriefDescriptionParams",
					"ActionStatus", "Caption", "Description", "ElementName" };
			Object[] attrobj = {
					metric.getSystemId(),
					new Integer(metric.getNodeId()),
					new Long(metric.getTmStartupTime()),
					new Long(metric.getTransactionSeqNumber()),
					metric.getTransactionClassifier(),
					metric.getStatus(),
					metric.getBriefDescriptionId(),
					metric.getBriefDescriptionParams(),
					getCDataForSAP_ITSAMJ2eeActionStatus(metric
							.getActionStatus()), metric.getCaption(),
					metric.getDescription(), metric.getElementName() };

			return new CompositeDataSupport(
					getCTypeForSAP_ITSAMPendingTransactionData(), attrnames,
					attrobj);
		}
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData getSAP_ITSAMPendingTransactionDataForCData(
			CompositeData data) {
		if (data == null) {
			return null;
		} else {

			/*
			 * throw an exception if the value of any key property is null in
			 * CData
			 */

			/*
			 * Initializes the read-only properties to default values if the
			 * value is null in CData with in the constructor
			 */

			com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData result = new com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData(
					(String) data.get("SystemId"),
					data.get("NodeId") == null ? 0 : ((Integer) data
							.get("NodeId")).intValue(), data
							.get("TmStartupTime") == null ? 0 : ((Long) data
							.get("TmStartupTime")).longValue(), data
							.get("TransactionSeqNumber") == null ? 0
							: ((Long) data.get("TransactionSeqNumber"))
									.longValue(), (String) data
							.get("TransactionClassifier"), (String) data
							.get("Status"), (String) data
							.get("BriefDescriptionId"), (String[]) data
							.get("BriefDescriptionParams"), (String) data
							.get("Caption"), (String) data.get("Description"),
					(String) data.get("ElementName"));

			if (data.get("ActionStatus") != null) {
				result
						.setActionStatus(getSAP_ITSAMJ2eeActionStatusForCData((CompositeData) data
								.get("ActionStatus")));
			}
			return result;
		}
	}

	public static CompositeType getCTypeForSAP_ITSAMPendingTransactionData()
			throws OpenDataException {
		String[] itemNames = { "SystemId", "NodeId", "TmStartupTime",
				"TransactionSeqNumber", "TransactionClassifier", "Status",
				"BriefDescriptionId", "BriefDescriptionParams", "ActionStatus",
				"Caption", "Description", "ElementName" };
		String[] itemDescriptions = {
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:",
				"Description:Description Missing",
				"Description:Description Missing",
				"Description:The Caption property is a short textual description (one- line string) of the object.",
				"Description:The Description property provides a textual description of the object.",
				"Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties." };
		OpenType[] itemTypes = { SimpleType.STRING, SimpleType.INTEGER,
				SimpleType.LONG, SimpleType.LONG, SimpleType.STRING,
				SimpleType.STRING, SimpleType.STRING,
				new ArrayType(1, SimpleType.STRING),
				getCTypeForSAP_ITSAMJ2eeActionStatus(), SimpleType.STRING,
				SimpleType.STRING, SimpleType.STRING };

		return new CompositeType(
				"SAP_ITSAMPendingTransactionData",
				"Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",
				itemNames, itemDescriptions, itemTypes);
	}

	public static com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData[] getSAP_ITSAMPendingTransactionDataArrForCData(
			CompositeData[] cd) {
		if (cd == null) {
			return null;
		} else {
			com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData[] arr = new com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData[cd.length];
			for (int i = 0; i < cd.length; i++)
				arr[i] = getSAP_ITSAMPendingTransactionDataForCData(cd[i]);
			return arr;
		}
	}

	public static CompositeData[] getCDataArrForSAP_ITSAMPendingTransactionData(
			com.sap.engine.services.ts.mbeans.SAP_ITSAMPendingTransactionData[] crr)
			throws OpenDataException {
		if (crr == null) {
			return null;
		} else {
			CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
			for (int i = 0; i < crr.length; i++)
				cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMPendingTransactionData(crr[i]);
			return cd;
		}
	}

}
