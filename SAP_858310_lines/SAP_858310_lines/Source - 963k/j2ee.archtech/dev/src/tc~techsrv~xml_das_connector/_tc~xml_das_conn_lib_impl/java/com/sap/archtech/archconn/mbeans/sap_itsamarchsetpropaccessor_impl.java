/*
 This file is generated by Code Generator
 for CIMClass SAP_ITSAMArchSetPropAccessor
 */

package com.sap.archtech.archconn.mbeans;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.sap.archtech.archconn.exceptions.ArchConnException;
import com.sap.archtech.archconn.util.ArchSetConfigurator;
import com.sap.archtech.archconn.util.JdbcUtils;
import com.sap.security.api.UMFactory;

/*
 * ManagedElement is an abstract class that provides a common superclass (or top
 * of the inheritance tree) for the non-association classes in the CIM Schema.
 * 
 * @version 1.0
 */

public class SAP_ITSAMArchSetPropAccessor_Impl implements SAP_ITSAMArchSetPropAccessor
{
  private static final String GETARCHSETS = "SELECT DISTINCT(asetname) FROM bc_xmla_asets WHERE asetname <> 'bc_archconn_config' ORDER BY asetname";
  private static final String GETBYSET = "SELECT * FROM bc_xmla_asets WHERE asetname = ?";
  private static final String UPDATEPROPS = "UPDATE bc_xmla_asets SET propvalue = ?, init = ?, proptext = ?, proppos = ? WHERE asetname = ? AND asetprop = ?";
  private final static String INSERTPROP = "INSERT INTO bc_xmla_asets (asetname, asetprop, proppos, proptext, init, propvalue) VALUES (?, ?, ?, ?, ?, ?)";
  private static final String DELETEPROP = "DELETE FROM bc_xmla_asets WHERE asetname = ? and asetprop = ?";
  private final static String HASWSTARTPROP = "SELECT 1 FROM bc_xmla_asets WHERE asetname = ? and asetprop = 'WSTART'";
  private final static String GETHOMEPATHPROPVAL = "SELECT propvalue from bc_xmla_asets WHERE asetname = ? and asetprop = 'AHOME'";

  private static final String JDBC_PATH = "jdbc/SAP/BC_XMLA";
  private final DataSource dataSource;
  
  public SAP_ITSAMArchSetPropAccessor_Impl()
  {
    InitialContext ctx = null;
    try
    {
      ctx = new InitialContext();
      dataSource = (DataSource) ctx.lookup(JDBC_PATH);
    }
    catch(NamingException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      if(ctx != null)
      {
        try
        {
          ctx.close();
        }
        catch(Exception e)
        {
          // $JL-EXC$
        }
      }
    }
  }
  
  public String[] loadArchivingSets()
  {
    ConnectorAccessPermission.checkPermission("view", "*");
    ArrayList<String> archSets = new ArrayList<String>();
    Connection conn = null;
    PreparedStatement pst2 = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      pst2 = conn.prepareStatement(GETARCHSETS);
      ResultSet rs2 = pst2.executeQuery();
      while(rs2.next())
      {
        archSets.add(rs2.getString("asetname"));
      }
      rs2.close();
      return archSets.toArray(new String[archSets.size()]);
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, pst2);
    }
  }

  public com.sap.archtech.archconn.mbeans.SAP_ITSAMArchSetProp[] getArchSetProperties(String archSetName)
  {
    ConnectorAccessPermission.checkPermission("view", "*");
    ArrayList<SAP_ITSAMArchSetProp> archSetProps = new ArrayList<SAP_ITSAMArchSetProp>();
    PreparedStatement pst1 = null;
    Connection conn = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      pst1 = conn.prepareStatement(GETBYSET);
      pst1.setString(1, archSetName);
      ResultSet rs1 = pst1.executeQuery();
      SAP_ITSAMArchSetProp archSetProp = null;
      while(rs1.next())
      {
        archSetProp = new SAP_ITSAMArchSetProp();
        archSetProp.setarchSetName(rs1.getString("ASETNAME"));
        archSetProp.setpropertyName(rs1.getString("ASETPROP"));
        archSetProp.setpropertyShortText(rs1.getString("PROPTEXT"));
        archSetProp.setpropertyValue(rs1.getString("PROPVALUE"));
        archSetProp.setpropertyPosition(rs1.getInt("PROPPOS"));
        archSetProps.add(archSetProp);
      }
      rs1.close();
      return archSetProps.toArray(new SAP_ITSAMArchSetProp[archSetProps.size()]);
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, pst1);
    }
  }

  public void saveArchSetProperties(com.sap.archtech.archconn.mbeans.SAP_ITSAMArchSetProp[] propList)
  {
  	HashSet<String> propNames = new HashSet<String>(propList.length);
  	for(SAP_ITSAMArchSetProp archSetProp : propList)
  	{
  		propNames.add(archSetProp.getpropertyName());
  	}
  	if(propNames.contains("RULESDCNAME") != propNames.contains("RULESETNAME"))
  	{
  		// The properties for the ILM rule set must not be modified independently
  		// Note: ArchConnException is thrown here to avoid breaking the exception handling logic of the NWA client
  		throw new RuntimeException(new ArchConnException("Missing one of the properties for the ILM rule set"));
  	}
  	
    Connection conn = null;
    PreparedStatement updateStmt = null;
    PreparedStatement insertStmt = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      updateStmt = conn.prepareStatement(UPDATEPROPS);
      String archSetName = "";
      String propertyName = null;
      HashSet<String> archSets4Sync = new HashSet<String>();
      String initPropValue = null;
      for(SAP_ITSAMArchSetProp archSetProp : propList)
      {
        if(!archSetName.equals(archSetProp.getarchSetName()))
        {
          ConnectorAccessPermission.checkPermission("configure", archSetProp.getarchSetName());
          archSetName = archSetProp.getarchSetName();
        }
        // check if sync home path is required
        propertyName = archSetProp.getpropertyName();
        if("AHOME".equalsIgnoreCase(propertyName))
        {
          archSets4Sync.add(archSetName);
          initPropValue = "N";
        }
        else
        {
          initPropValue = "Y";
        }
        // update properties table
        updateStmt.setString(1, archSetProp.getpropertyValue());
        updateStmt.setString(2, initPropValue);
        updateStmt.setString(3, archSetProp.getpropertyShortText());
        updateStmt.setShort(4, (short)archSetProp.getpropertyPosition());
        updateStmt.setString(5, archSetName);
        updateStmt.setString(6, propertyName);
        int updated = updateStmt.executeUpdate();
        if(updated == 0)
        {
          // next try: insert
          insertStmt = conn.prepareStatement(INSERTPROP);
          insertStmt.setString(1, archSetProp.getarchSetName());
          insertStmt.setString(2, archSetProp.getpropertyName());
          insertStmt.setShort(3, (short)archSetProp.getpropertyPosition());
          insertStmt.setString(4, archSetProp.getpropertyShortText());
          insertStmt.setString(5, initPropValue);
          insertStmt.setString(6, archSetProp.getpropertyValue());
          updated = insertStmt.executeUpdate();
          if(updated != 1)
          {
            throw new SQLException(updated + " rows updated");
          }
        }
      }
      // commit must be done BEFORE the sync operation to avoid DB dead locks!
      conn.commit();
      // sync home paths if necessary
      for(String archSet : archSets4Sync)
      {
        ArchSetConfigurator.createSetHome(UMFactory.getAuthenticator().getLoggedInUser().getName(), archSet);
      }
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    catch(ArchConnException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, updateStmt, insertStmt);
    }
  }

  public void deleteArchSetProperty(com.sap.archtech.archconn.mbeans.SAP_ITSAMArchSetProp toBeDeleted)
  {
    if(toBeDeleted == null)
    {
      return;
    }
    // check: Home Path property must not be deleted
    String propName = toBeDeleted.getpropertyName();
    if(propName.equals("AHOME"))
    {
      throw new IllegalArgumentException("AHOME property must not be deleted");
    }

    ConnectorAccessPermission.checkPermission("configure", toBeDeleted.getarchSetName());
    Connection conn = null;
    PreparedStatement deleteStmt = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      deleteStmt = conn.prepareStatement(DELETEPROP);
      deleteStmt.setString(1, toBeDeleted.getarchSetName());
      deleteStmt.setString(2, propName);
      deleteStmt.executeUpdate();
      if(propName.equals("RULESETNAME"))
      {
      	// also delete RULESDCNAME
      	deleteStmt.setString(2, "RULESDCNAME");
        deleteStmt.executeUpdate();
      }
      else if(propName.equals("RULESDCNAME"))
      {
      	// also delete RULESETNAME
      	deleteStmt.setString(2, "RULESETNAME");
        deleteStmt.executeUpdate();
      }
      conn.commit();
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, deleteStmt);
    }
  }

  public boolean hasWStartProperty(String archSetName)
  {
    ConnectorAccessPermission.checkPermission("view", "*");
    PreparedStatement selectStmt = null;
    Connection conn = null;
    ResultSet rs = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      selectStmt = conn.prepareStatement(HASWSTARTPROP);
      selectStmt.setString(1, archSetName);
      rs = selectStmt.executeQuery();
      boolean retVal = rs.next();
      rs.close();
      return retVal;
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, selectStmt);
    }
  }
  
  public String getHomePathCollectionURI(String archSetName)
  {
    ConnectorAccessPermission.checkPermission("view", "*");
    PreparedStatement selectStmt = null;
    Connection conn = null;
    ResultSet rs = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      selectStmt = conn.prepareStatement(GETHOMEPATHPROPVAL);
      selectStmt.setString(1, archSetName);
      rs = selectStmt.executeQuery();
      if(rs.next())
      {
        String hpCollUri = _getHomePathCollectionUri(rs.getString("PROPVALUE"));
        rs.close();
        return hpCollUri;
      }
      rs.close();
      throw new RuntimeException("There is no Home Path for archiving set " + archSetName);
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, selectStmt);
    }
  }
  
  private String _getHomePathCollectionUri(String homePathPropValue)
  {
    String homePathCollUri = homePathPropValue;
    // cut "/<SYSID>" prefix and trailing "/"
    if(homePathCollUri.startsWith("/<SYSID>"))
    {
      homePathCollUri = homePathCollUri.substring(8);
    }
    if(homePathCollUri.endsWith("/"))
    {
      int length = homePathCollUri.length();
      homePathCollUri = homePathCollUri.substring(0, length-1);
    }
    return homePathCollUri;
  }
}