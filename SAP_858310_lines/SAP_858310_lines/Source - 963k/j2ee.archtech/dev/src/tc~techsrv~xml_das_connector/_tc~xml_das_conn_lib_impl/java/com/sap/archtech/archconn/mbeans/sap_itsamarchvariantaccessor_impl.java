/*
 This file is generated by Code Generator
 for CIMClass SAP_ITSAMArchVariantAccessor
 */

package com.sap.archtech.archconn.mbeans;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.sap.archtech.archconn.util.JdbcUtils;

/*
 * ManagedElement is an abstract class that provides a common superclass (or top
 * of the inheritance tree) for the non-association classes in the CIM Schema.
 * 
 * @version 1.0
 */

public class SAP_ITSAMArchVariantAccessor_Impl implements SAP_ITSAMArchVariantAccessor
{
  private final static String INS_PS = "INSERT INTO bc_xmla_variants(archset, varname, vardesc, paramvalues) VALUES (?, ?, ?, ?)";
  private static final String UPDATE_PS = "UPDATE bc_xmla_variants SET vardesc = ?, paramvalues = ? WHERE archset = ? AND varname = ?";
  private final static String GET_SETS = "SELECT varname, vardesc FROM bc_xmla_variants WHERE archset = ?";
  private final static String GET_VAL = "SELECT paramvalues FROM bc_xmla_variants WHERE archset = ? AND varname = ?";
  private final static String DELETE_VARIANT = "DELETE  FROM bc_xmla_variants WHERE archset = ? AND varname = ?";

  private static final String JDBC_PATH = "jdbc/SAP/BC_XMLA";
  private final DataSource dataSource;
  
  public SAP_ITSAMArchVariantAccessor_Impl()
  {
    InitialContext ctx = null;
    try
    {
      ctx = new InitialContext();
      dataSource = (DataSource) ctx.lookup(JDBC_PATH);
    }
    catch(NamingException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      if(ctx != null)
      {
        try
        {
          ctx.close();
        }
        catch(Exception e)
        {
          // $JL-EXC$
        }
      }
    }
  }
  
  public void saveArchVariant(com.sap.archtech.archconn.mbeans.SAP_ITSAMArchVariant variant, byte[] binary)
  {
    ConnectorAccessPermission.checkPermission("archive", variant.getarchSetName());
    Connection conn = null;
    PreparedStatement updateStmt = null;
    PreparedStatement insertStmt = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      updateStmt = conn.prepareStatement(UPDATE_PS);
      updateStmt.setString(1, variant.getvariantShortText());
      byte[] content = new byte[binary.length];
      System.arraycopy(binary, 0, content, 0, binary.length);
      updateStmt.setBytes(2, content);
      updateStmt.setString(3, variant.getarchSetName());
      updateStmt.setString(4, variant.getvariantName());
      int updated = updateStmt.executeUpdate();
      if(updated == 0)
      {
        // next try: insert
        insertStmt = conn.prepareStatement(INS_PS);
        insertStmt.setString(1, variant.getarchSetName());
        insertStmt.setString(2, variant.getvariantName());
        insertStmt.setString(3, variant.getvariantShortText());
        insertStmt.setBytes(4, content);
        updated = insertStmt.executeUpdate();
        if(updated != 1)
        {
          throw new SQLException(updated + " rows updated");
        }
      }
      conn.commit();
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, insertStmt, updateStmt);
    }
  }

  public com.sap.archtech.archconn.mbeans.SAP_ITSAMArchVariant[] getArchVariants(String archSetName)
  {
    ConnectorAccessPermission.checkPermission("archive", archSetName);
    ArrayList<SAP_ITSAMArchVariant> variants = new ArrayList<SAP_ITSAMArchVariant>();
    Connection conn = null; 
    PreparedStatement pst2 = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      pst2 = conn.prepareStatement(GET_SETS);
      pst2.setString(1, archSetName);
      ResultSet rs2 = pst2.executeQuery();
      SAP_ITSAMArchVariant variant = null;
      while (rs2.next())
      {
        variant = new SAP_ITSAMArchVariant();
        variant.setvariantName(rs2.getString("varname"));
        variant.setvariantShortText(rs2.getString("vardesc"));
        variants.add(variant);
      }
      rs2.close();
      return variants.toArray(new SAP_ITSAMArchVariant[variants.size()]);
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, pst2);
    }
  }

  public byte[] getArchVariantBinary(String archSetName, String variantName)
  {
    ConnectorAccessPermission.checkPermission("archive", archSetName);
    Connection conn = null;
    PreparedStatement pst3 = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      pst3 = conn.prepareStatement(GET_VAL);
      pst3.setString(1, archSetName);
      pst3.setString(2, variantName);
      ResultSet rs3 = pst3.executeQuery();
      if(!rs3.next())
      {
        throw new SQLException("Parameter Set does not exist");
      }
      byte[] settings = rs3.getBytes("paramvalues");
      rs3.close();
      byte[] retVal = new byte[settings.length];
      System.arraycopy(settings, 0, retVal, 0, settings.length);
      return retVal;
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, pst3);
    }
  }
  
  public void deleteArchVariant(String archSetName , String variantName)
  {
    ConnectorAccessPermission.checkPermission("archive", archSetName);
    Connection conn = null;
    PreparedStatement delStmt = null;
    try
    {
      conn = JdbcUtils.getConnection(dataSource);
      delStmt = conn.prepareStatement(DELETE_VARIANT);
      delStmt.setString(1, archSetName);
      delStmt.setString(2, variantName);
      delStmt.executeUpdate();
      conn.commit();
    }
    catch(SQLException e)
    {
      throw new RuntimeException(e);
    }
    finally
    {
      JdbcUtils.closeJdbcResources(conn, delStmt);
    }
  }
}