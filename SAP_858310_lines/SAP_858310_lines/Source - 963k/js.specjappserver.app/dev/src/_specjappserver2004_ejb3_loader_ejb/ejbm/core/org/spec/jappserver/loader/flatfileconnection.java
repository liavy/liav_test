/*
 * Copyright (c) 2001-2007 Standard Performance Evaluation Corporation (SPEC)
 *               All rights reserved.
 *
 * This source code is provided as is, without any express or implied warranty.
 *
 *  History:
 *  Date        ID, Company               Description
 *  ----------  -----------------------   ---------------------------------------------------------------
 *  2007/10/02  Bernhard Riedhofer, SAP   Created, integration of loader into SPECjAppServer2007 application
 */
package org.spec.jappserver.loader;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

/*
 * Connection for flat file generation.
 */
public class FlatFileConnection implements Connection {

    private final String flatFileDirectory;
    private final String delimiter;

    public FlatFileConnection(String flatFileDirectory, String delimiter) {
        this.flatFileDirectory = flatFileDirectory;
        this.delimiter = delimiter;
    }

    /*
     * Can be used by insert statements only.
     */
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new FlatFileStatement(flatFileDirectory, delimiter, sql);
    }

    public Statement createStatement() throws SQLException {
        return new FlatFileStatement();
    }

    public void close() throws SQLException {}

    public void commit() throws SQLException {}

    /*
     * All methods below this line are not supported (and not implemented).
     */
    private void throwNotSupportedException() throws SQLException {
        throw new SQLException("Method not supported by " + FlatFileConnection.class);
    }

    public void clearWarnings() throws SQLException {
        throwNotSupportedException();
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public boolean getAutoCommit() throws SQLException {
        throwNotSupportedException();
        return false;
    }

    public String getCatalog() throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public int getHoldability() throws SQLException {
        throwNotSupportedException();
        return 0;
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public int getTransactionIsolation() throws SQLException {
        throwNotSupportedException();
        return 0;
    }

    public Map<String, Class<?>> getTypeMap() throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public SQLWarning getWarnings() throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public boolean isClosed() throws SQLException {
        throwNotSupportedException();
        return false;
    }

    public boolean isReadOnly() throws SQLException {
        throwNotSupportedException();
        return false;
    }

    public String nativeSQL(String sql) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
            throwNotSupportedException();
            return null;
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        throwNotSupportedException();
    }

    public void rollback() throws SQLException {
        throwNotSupportedException();
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        throwNotSupportedException();
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        throwNotSupportedException();
    }

    public void setCatalog(String catalog) throws SQLException {
        throwNotSupportedException();
    }

    public void setHoldability(int holdability) throws SQLException {
        throwNotSupportedException();
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        throwNotSupportedException();
    }

    public Savepoint setSavepoint() throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        throwNotSupportedException();
        return null;
    }

    public void setTransactionIsolation(int level) throws SQLException {
        throwNotSupportedException();
    }

    public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {
        throwNotSupportedException();
    }
}
